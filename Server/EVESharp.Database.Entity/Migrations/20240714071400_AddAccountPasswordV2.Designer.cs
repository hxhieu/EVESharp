// <auto-generated />
using System;
using EVESharp.Database.Entity.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EVESharp.Database.Entity.Migrations
{
    [DbContext(typeof(EveSharpDbContext))]
    [Migration("20240714071400_AddAccountPasswordV2")]
    partial class AddAccountPasswordV2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_unicode_ci")
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("EVESharp.Database.Entity.Account", b =>
                {
                    b.Property<uint>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("accountID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("AccountId"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("varchar(48)")
                        .HasColumnName("accountName");

                    b.Property<bool>("Banned")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("banned");

                    b.Property<bool>("Online")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("online");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("password");

                    b.Property<string>("PasswordV2")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("password_v2");

                    b.Property<long>("ProxyNodeId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("proxyNodeID");

                    b.Property<ulong>("Role")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("role");

                    b.HasKey("AccountId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountName" }, "accountName")
                        .IsUnique();

                    b.ToTable("account");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.AgtAgent", b =>
                {
                    b.Property<int>("AgentId")
                        .HasColumnType("int(11)")
                        .HasColumnName("agentID");

                    b.Property<byte?>("AgentTypeId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("agentTypeID");

                    b.Property<int?>("CorporationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("corporationID");

                    b.Property<byte?>("DivisionId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("divisionID");

                    b.Property<sbyte?>("Level")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("level");

                    b.Property<short?>("Quality")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("quality");

                    b.Property<int?>("StationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("stationID");

                    b.HasKey("AgentId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AgentTypeId" }, "agentTypeID");

                    b.HasIndex(new[] { "CorporationId" }, "agtAgents_IX_corporation");

                    b.HasIndex(new[] { "StationId" }, "agtAgents_IX_station");

                    b.HasIndex(new[] { "DivisionId" }, "divisionID");

                    b.ToTable("agtAgents");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.AgtAgentType", b =>
                {
                    b.Property<byte>("AgentTypeId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("agentTypeID");

                    b.Property<string>("AgentType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("agentType");

                    b.HasKey("AgentTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("agtAgentTypes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.AgtConfig", b =>
                {
                    b.Property<int>("AgentId")
                        .HasColumnType("int(11)")
                        .HasColumnName("agentID");

                    b.Property<string>("K")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("k");

                    b.Property<string>("V")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("v");

                    b.HasKey("AgentId", "K")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("agtConfig");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.AgtMission", b =>
                {
                    b.Property<uint>("MissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("missionID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("MissionId"));

                    b.Property<byte>("ImportantMission")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("importantMission");

                    b.Property<byte>("MissionLevel")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("missionLevel");

                    b.Property<string>("MissionName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("missionName")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("MissionTypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("missionTypeID");

                    b.HasKey("MissionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MissionLevel" }, "missionLevel");

                    b.HasIndex(new[] { "MissionTypeId" }, "missionTypeID");

                    b.ToTable("agtMissions");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.AgtMissionGroup", b =>
                {
                    b.Property<uint>("CorporationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("corporationID");

                    b.Property<uint>("DivisionId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("divisionID");

                    b.Property<uint>("Level")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("level");

                    b.Property<uint?>("MissionId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("missionID");

                    b.HasKey("CorporationId", "DivisionId", "Level")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.HasIndex(new[] { "DivisionId" }, "divisionID")
                        .HasDatabaseName("divisionID1");

                    b.HasIndex(new[] { "MissionId" }, "missionID");

                    b.ToTable("agtMissionGroups");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.AgtMissionType", b =>
                {
                    b.Property<uint>("MissionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("missionTypeID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("MissionTypeId"));

                    b.Property<string>("MissionTypeName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("missionTypeName")
                        .HasDefaultValueSql("''");

                    b.HasKey("MissionTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("agtMissionTypes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.AgtOffer", b =>
                {
                    b.Property<uint>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("offerID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("OfferId"));

                    b.Property<uint>("LoyaltyPoints")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("loyaltyPoints");

                    b.Property<string>("OfferAcceptedText")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("offerAcceptedText");

                    b.Property<byte>("OfferLevel")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("offerLevel");

                    b.Property<string>("OfferName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("offerName")
                        .HasDefaultValueSql("''");

                    b.Property<string>("OfferText")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("offerText");

                    b.Property<uint>("RequiredIsk")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("requiredISK");

                    b.Property<uint>("RewardIsk")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("rewardISK");

                    b.HasKey("OfferId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OfferLevel" }, "offerLevel");

                    b.ToTable("agtOffers");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.AgtOfferGroup", b =>
                {
                    b.Property<uint>("CorporationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("corporationID");

                    b.Property<uint>("DivisionId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("divisionID");

                    b.Property<uint>("Level")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("level");

                    b.Property<uint?>("OfferId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("offerID");

                    b.HasKey("CorporationId", "DivisionId", "Level")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.HasIndex(new[] { "DivisionId" }, "divisionID")
                        .HasDatabaseName("divisionID2");

                    b.HasIndex(new[] { "OfferId" }, "offerID");

                    b.ToTable("agtOfferGroups");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.AgtOfferRequired", b =>
                {
                    b.Property<uint>("OfferId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("offerID");

                    b.Property<uint>("TypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("typeID");

                    b.Property<uint>("Quantity")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("quantity");

                    b.HasKey("OfferId", "TypeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "TypeId" }, "typeID");

                    b.ToTable("agtOfferRequired");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.AgtOfferReward", b =>
                {
                    b.Property<uint>("OfferId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("offerID");

                    b.Property<uint>("TypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("typeID");

                    b.Property<uint>("Quantity")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("quantity");

                    b.HasKey("OfferId", "TypeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "TypeId" }, "typeID")
                        .HasDatabaseName("typeID1");

                    b.ToTable("agtOfferReward");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.AgtResearchAgent", b =>
                {
                    b.Property<int>("AgentId")
                        .HasColumnType("int(11)")
                        .HasColumnName("agentID");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("typeID");

                    b.HasKey("AgentId", "TypeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "TypeId" }, "agtResearchAgents_IX_type");

                    b.ToTable("agtResearchAgents");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.AllRelationship", b =>
                {
                    b.Property<int>("FromId")
                        .HasColumnType("int(11)")
                        .HasColumnName("fromID");

                    b.Property<int>("ToId")
                        .HasColumnType("int(11)")
                        .HasColumnName("toID");

                    b.Property<int>("Relationship")
                        .HasColumnType("int(11)")
                        .HasColumnName("relationship");

                    b.HasKey("FromId", "ToId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("allRelationships");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.BillType", b =>
                {
                    b.Property<uint>("BillTypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("billTypeID");

                    b.Property<string>("BillTypeName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("billTypeName")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("''");

                    b.HasKey("BillTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("billTypes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.BloodlineType", b =>
                {
                    b.Property<uint>("BloodlineId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("bloodlineID");

                    b.Property<uint>("TypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("typeID");

                    b.HasKey("BloodlineId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TypeId" }, "typeID")
                        .HasDatabaseName("typeID2");

                    b.ToTable("bloodlineTypes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CacheLocation", b =>
                {
                    b.Property<uint>("LocationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("locationID");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("locationName")
                        .HasDefaultValueSql("''");

                    b.Property<double>("X")
                        .HasColumnType("double")
                        .HasColumnName("x");

                    b.Property<double>("Y")
                        .HasColumnType("double")
                        .HasColumnName("y");

                    b.Property<double>("Z")
                        .HasColumnType("double")
                        .HasColumnName("z");

                    b.HasKey("LocationId")
                        .HasName("PRIMARY");

                    b.ToTable("cacheLocations");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CacheOwner", b =>
                {
                    b.Property<uint>("OwnerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("ownerID");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ownerName")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("TypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("typeID");

                    b.HasKey("OwnerId")
                        .HasName("PRIMARY");

                    b.ToTable("cacheOwners");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrAccessory", b =>
                {
                    b.Property<uint>("AccessoryId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("accessoryID");

                    b.Property<string>("AccessoryName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("accessoryName")
                        .HasDefaultValueSql("''");

                    b.HasKey("AccessoryId")
                        .HasName("PRIMARY");

                    b.ToTable("chrAccessories");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrAncestry", b =>
                {
                    b.Property<byte>("AncestryId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("ancestryID");

                    b.Property<string>("AncestryName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ancestryName");

                    b.Property<byte?>("BloodlineId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("bloodlineID");

                    b.Property<sbyte?>("Charisma")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("charisma");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<short?>("GraphicId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("graphicID");

                    b.Property<sbyte?>("Intelligence")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("intelligence");

                    b.Property<sbyte?>("Memory")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("memory");

                    b.Property<sbyte?>("Perception")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("perception");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("shortDescription");

                    b.Property<sbyte?>("Willpower")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("willpower");

                    b.HasKey("AncestryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BloodlineId" }, "bloodlineID");

                    b.HasIndex(new[] { "GraphicId" }, "graphicID");

                    b.ToTable("chrAncestries");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrApplication", b =>
                {
                    b.Property<uint>("CorporationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("corporationID");

                    b.Property<uint>("CharacterId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("characterID");

                    b.Property<ulong>("ApplicationDateTime")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("applicationDateTime");

                    b.Property<string>("ApplicationText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("applicationText");

                    b.HasKey("CorporationId", "CharacterId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("chrApplications");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrAttribute", b =>
                {
                    b.Property<byte>("AttributeId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("attributeID");

                    b.Property<string>("AttributeName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("attributeName");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<short?>("GraphicId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("graphicID");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("notes");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("shortDescription");

                    b.HasKey("AttributeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GraphicId" }, "graphicID")
                        .HasDatabaseName("graphicID1");

                    b.ToTable("chrAttributes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrBackground", b =>
                {
                    b.Property<uint>("BackgroundId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("backgroundID");

                    b.Property<string>("BackgroundName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("backgroundName")
                        .HasDefaultValueSql("''");

                    b.HasKey("BackgroundId")
                        .HasName("PRIMARY");

                    b.ToTable("chrBackgrounds");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrBeard", b =>
                {
                    b.Property<uint>("BeardId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("beardID");

                    b.Property<string>("BeardName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("beardName")
                        .HasDefaultValueSql("''");

                    b.HasKey("BeardId")
                        .HasName("PRIMARY");

                    b.ToTable("chrBeards");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrBlaccessory", b =>
                {
                    b.Property<uint>("BloodlineId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("bloodlineID");

                    b.Property<uint>("Gender")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("gender");

                    b.Property<uint>("AccessoryId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("accessoryID");

                    b.Property<uint>("Npc")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("npc");

                    b.HasKey("BloodlineId", "Gender", "AccessoryId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("chrBLAccessories");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrBlbackground", b =>
                {
                    b.Property<uint>("BackgroundId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("backgroundID");

                    b.Property<string>("BackgroundName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("backgroundName")
                        .HasDefaultValueSql("''");

                    b.HasKey("BackgroundId")
                        .HasName("PRIMARY");

                    b.ToTable("chrBLBackgrounds");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrBlbeard", b =>
                {
                    b.Property<uint>("BloodlineId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("bloodlineID");

                    b.Property<uint>("Gender")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("gender");

                    b.Property<uint>("BeardId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("beardID");

                    b.Property<uint>("Npc")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("npc");

                    b.HasKey("BloodlineId", "Gender", "BeardId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("chrBLBeards");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrBlcostume", b =>
                {
                    b.Property<uint>("BloodlineId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("bloodlineID");

                    b.Property<uint>("Gender")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("gender");

                    b.Property<uint>("CostumeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("costumeID");

                    b.Property<uint>("Npc")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("npc");

                    b.HasKey("BloodlineId", "Gender", "CostumeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("chrBLCostumes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrBldeco", b =>
                {
                    b.Property<uint>("BloodlineId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("bloodlineID");

                    b.Property<uint>("Gender")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("gender");

                    b.Property<uint>("DecoId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("decoID");

                    b.Property<uint>("Npc")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("npc");

                    b.HasKey("BloodlineId", "Gender", "DecoId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("chrBLDecos");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrBleye", b =>
                {
                    b.Property<uint>("BloodlineId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("bloodlineID");

                    b.Property<uint>("Gender")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("gender");

                    b.Property<uint>("EyesId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("eyesID");

                    b.Property<uint>("Npc")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("npc");

                    b.HasKey("BloodlineId", "Gender", "EyesId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("chrBLEyes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrBleyebrow", b =>
                {
                    b.Property<uint>("BloodlineId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("bloodlineID");

                    b.Property<uint>("Gender")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("gender");

                    b.Property<uint>("EyebrowsId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("eyebrowsID");

                    b.Property<uint>("Npc")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("npc");

                    b.HasKey("BloodlineId", "Gender", "EyebrowsId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("chrBLEyebrows");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrBlhair", b =>
                {
                    b.Property<uint>("BloodlineId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("bloodlineID");

                    b.Property<uint>("Gender")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("gender");

                    b.Property<uint>("HairId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("hairID");

                    b.Property<uint>("Npc")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("npc");

                    b.HasKey("BloodlineId", "Gender", "HairId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("chrBLHairs");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrBllight", b =>
                {
                    b.Property<uint>("LightId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("lightID");

                    b.Property<string>("LightName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("lightName")
                        .HasDefaultValueSql("''");

                    b.HasKey("LightId")
                        .HasName("PRIMARY");

                    b.ToTable("chrBLLights");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrBllipstick", b =>
                {
                    b.Property<uint>("BloodlineId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("bloodlineID");

                    b.Property<uint>("Gender")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("gender");

                    b.Property<uint>("LipstickId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("lipstickID");

                    b.Property<uint>("Npc")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("npc");

                    b.HasKey("BloodlineId", "Gender", "LipstickId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("chrBLLipsticks");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrBlmakeup", b =>
                {
                    b.Property<uint>("BloodlineId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("bloodlineID");

                    b.Property<uint>("Gender")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("gender");

                    b.Property<uint>("MakeupId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("makeupID");

                    b.Property<uint>("Npc")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("npc");

                    b.HasKey("BloodlineId", "Gender", "MakeupId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("chrBLMakeups");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrBloodline", b =>
                {
                    b.Property<byte>("BloodlineId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("bloodlineID");

                    b.Property<string>("BloodlineName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("bloodlineName");

                    b.Property<sbyte?>("Charisma")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("charisma");

                    b.Property<int?>("CorporationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("corporationID");

                    b.Property<uint>("DataId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("dataID");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("FemaleDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("femaleDescription");

                    b.Property<short?>("GraphicId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("graphicID");

                    b.Property<sbyte?>("Intelligence")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("intelligence");

                    b.Property<string>("MaleDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("maleDescription");

                    b.Property<sbyte?>("Memory")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("memory");

                    b.Property<sbyte?>("Perception")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("perception");

                    b.Property<byte?>("RaceId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("raceID");

                    b.Property<short?>("ShipTypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("shipTypeID");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("shortDescription");

                    b.Property<string>("ShortFemaleDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("shortFemaleDescription");

                    b.Property<string>("ShortMaleDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("shortMaleDescription");

                    b.Property<sbyte?>("Willpower")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("willpower");

                    b.HasKey("BloodlineId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CorporationId" }, "corporationID");

                    b.HasIndex(new[] { "GraphicId" }, "graphicID")
                        .HasDatabaseName("graphicID2");

                    b.HasIndex(new[] { "RaceId" }, "raceID");

                    b.HasIndex(new[] { "ShipTypeId" }, "shipTypeID");

                    b.ToTable("chrBloodlines");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrBlskin", b =>
                {
                    b.Property<uint>("BloodlineId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("bloodlineID");

                    b.Property<uint>("Gender")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("gender");

                    b.Property<uint>("SkinId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("skinID");

                    b.Property<uint>("Npc")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("npc");

                    b.HasKey("BloodlineId", "Gender", "SkinId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("chrBLSkins");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrBookmark", b =>
                {
                    b.Property<uint>("BookmarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("bookmarkID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("BookmarkId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("comment")
                        .HasDefaultValueSql("'0'");

                    b.Property<ulong>("Created")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("created");

                    b.Property<uint>("ItemId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("itemID");

                    b.Property<uint>("LocationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("locationID");

                    b.Property<string>("Memo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)")
                        .HasColumnName("memo")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("OwnerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("ownerID");

                    b.Property<uint>("TypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("typeID");

                    b.Property<double>("X")
                        .HasColumnType("double")
                        .HasColumnName("x");

                    b.Property<double>("Y")
                        .HasColumnType("double")
                        .HasColumnName("y");

                    b.Property<double>("Z")
                        .HasColumnType("double")
                        .HasColumnName("z");

                    b.HasKey("BookmarkId")
                        .HasName("PRIMARY");

                    b.ToTable("chrBookmarks");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrBounty", b =>
                {
                    b.Property<int>("BountyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("bountyID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BountyId"));

                    b.Property<double>("Bounty")
                        .HasColumnType("double(22,0)")
                        .HasColumnName("bounty");

                    b.Property<uint>("CharacterId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("characterID");

                    b.Property<uint>("OwnerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("ownerID");

                    b.HasKey("BountyId")
                        .HasName("PRIMARY");

                    b.ToTable("chrBounties");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrCareer", b =>
                {
                    b.Property<byte>("CareerId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("careerID");

                    b.Property<string>("CareerName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("careerName");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<short?>("GraphicId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("graphicID");

                    b.Property<byte?>("RaceId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("raceID");

                    b.Property<byte?>("SchoolId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("schoolID");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("shortDescription");

                    b.HasKey("CareerId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GraphicId" }, "graphicID")
                        .HasDatabaseName("graphicID3");

                    b.HasIndex(new[] { "RaceId" }, "raceID")
                        .HasDatabaseName("raceID1");

                    b.HasIndex(new[] { "SchoolId" }, "schoolID");

                    b.ToTable("chrCareers");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrCareerSpeciality", b =>
                {
                    b.Property<byte>("SpecialityId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("specialityID");

                    b.Property<byte?>("CareerId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("careerID");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<short?>("GraphicId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("graphicID");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("shortDescription");

                    b.Property<string>("SpecialityName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("specialityName");

                    b.HasKey("SpecialityId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CareerId" }, "careerID");

                    b.HasIndex(new[] { "GraphicId" }, "graphicID")
                        .HasDatabaseName("graphicID4");

                    b.ToTable("chrCareerSpecialities");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrCertificate", b =>
                {
                    b.Property<uint>("CharacterId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("characterID");

                    b.Property<uint>("CertificateId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("certificateID");

                    b.Property<long>("GrantDate")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("grantDate");

                    b.Property<sbyte>("VisibilityFlags")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("visibilityFlags");

                    b.HasKey("CharacterId", "CertificateId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("chrCertificates");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrCombatLog", b =>
                {
                    b.Property<uint>("KillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("killID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("KillId"));

                    b.Property<uint?>("FinalAllianceId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("finalAllianceID");

                    b.Property<uint>("FinalCharacterId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("finalCharacterID");

                    b.Property<uint>("FinalCorporationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("finalCorporationID");

                    b.Property<double>("FinalDamageDone")
                        .HasColumnType("double unsigned")
                        .HasColumnName("finalDamageDone");

                    b.Property<uint?>("FinalFactionId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("finalFactionID");

                    b.Property<double>("FinalSecurityStatus")
                        .HasColumnType("double unsigned")
                        .HasColumnName("finalSecurityStatus");

                    b.Property<uint>("FinalShipTypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("finalShipTypeID");

                    b.Property<uint>("FinalWeaponTypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("finalWeaponTypeID");

                    b.Property<double>("KillBlob")
                        .HasColumnType("double unsigned")
                        .HasColumnName("killBlob");

                    b.Property<long>("KillTime")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("killTime");

                    b.Property<uint>("MoonId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("moonID");

                    b.Property<uint>("SolarSystemId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("solarSystemID");

                    b.Property<uint?>("VictimAllianceId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("victimAllianceID");

                    b.Property<uint>("VictimCharacterId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("victimCharacterID");

                    b.Property<uint>("VictimCorporationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("victimCorporationID");

                    b.Property<double>("VictimDamageTaken")
                        .HasColumnType("double unsigned")
                        .HasColumnName("victimDamageTaken");

                    b.Property<uint?>("VictimFactionId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("victimFactionID");

                    b.Property<uint>("VictimShipTypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("victimShipTypeID");

                    b.HasKey("KillId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FinalCharacterId" }, "finalCharacterID");

                    b.HasIndex(new[] { "FinalCorporationId" }, "finalCorporationID");

                    b.HasIndex(new[] { "SolarSystemId" }, "solarSystemID");

                    b.HasIndex(new[] { "VictimCharacterId" }, "victimCharacterID");

                    b.HasIndex(new[] { "VictimCorporationId" }, "victimCorporationID");

                    b.ToTable("chrCombatLogs");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrCorporationRole", b =>
                {
                    b.Property<uint>("CharacterId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("characterID");

                    b.Property<ulong>("Corprole")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("corprole");

                    b.Property<ulong>("RolesAtAll")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("rolesAtAll");

                    b.Property<ulong>("RolesAtBase")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("rolesAtBase");

                    b.Property<ulong>("RolesAtHq")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("rolesAtHQ");

                    b.Property<ulong>("RolesAtOther")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("rolesAtOther");

                    b.HasKey("CharacterId")
                        .HasName("PRIMARY");

                    b.ToTable("chrCorporationRoles");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrCostume", b =>
                {
                    b.Property<uint>("CostumeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("costumeID");

                    b.Property<string>("CostumeName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("costumeName")
                        .HasDefaultValueSql("''");

                    b.HasKey("CostumeId")
                        .HasName("PRIMARY");

                    b.ToTable("chrCostumes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrDeco", b =>
                {
                    b.Property<uint>("DecoId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("decoID");

                    b.Property<string>("DecoName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("decoName")
                        .HasDefaultValueSql("''");

                    b.HasKey("DecoId")
                        .HasName("PRIMARY");

                    b.ToTable("chrDecos");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrDepartment", b =>
                {
                    b.Property<uint>("DepartmentId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("departmentID");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("departmentName")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("description");

                    b.Property<uint>("GraphicId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("graphicID");

                    b.Property<uint>("SchoolId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("schoolID");

                    b.Property<uint>("SkillTypeId1")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("skillTypeID1");

                    b.Property<uint>("SkillTypeId2")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("skillTypeID2");

                    b.Property<uint>("SkillTypeId3")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("skillTypeID3");

                    b.HasKey("DepartmentId")
                        .HasName("PRIMARY");

                    b.ToTable("chrDepartments");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrEmployment", b =>
                {
                    b.Property<uint>("CharacterId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("characterID");

                    b.Property<uint>("CorporationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("corporationID");

                    b.Property<ulong>("StartDate")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("startDate");

                    b.Property<sbyte>("Deleted")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("deleted");

                    b.HasKey("CharacterId", "CorporationId", "StartDate")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.HasIndex(new[] { "CorporationId" }, "corporationID")
                        .HasDatabaseName("corporationID1");

                    b.ToTable("chrEmployment");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrEye", b =>
                {
                    b.Property<uint>("EyesId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("eyesID");

                    b.Property<string>("EyesName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("eyesName")
                        .HasDefaultValueSql("''");

                    b.HasKey("EyesId")
                        .HasName("PRIMARY");

                    b.ToTable("chrEyes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrEyebrow", b =>
                {
                    b.Property<uint>("EyebrowsId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("eyebrowsID");

                    b.Property<string>("EyebrowsName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("eyebrowsName")
                        .HasDefaultValueSql("''");

                    b.HasKey("EyebrowsId")
                        .HasName("PRIMARY");

                    b.ToTable("chrEyebrows");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrFaction", b =>
                {
                    b.Property<int>("FactionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("factionID");

                    b.Property<int?>("CorporationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("corporationID");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("FactionName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("factionName");

                    b.Property<int?>("MilitiaCorporationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("militiaCorporationID");

                    b.Property<int?>("RaceIds")
                        .HasColumnType("int(11)")
                        .HasColumnName("raceIDs");

                    b.Property<double?>("SizeFactor")
                        .HasColumnType("double")
                        .HasColumnName("sizeFactor");

                    b.Property<int?>("SolarSystemId")
                        .HasColumnType("int(11)")
                        .HasColumnName("solarSystemID");

                    b.Property<short?>("StationCount")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("stationCount");

                    b.Property<short?>("StationSystemCount")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("stationSystemCount");

                    b.HasKey("FactionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CorporationId" }, "corporationID")
                        .HasDatabaseName("corporationID2");

                    b.HasIndex(new[] { "MilitiaCorporationId" }, "militiaCorporationID");

                    b.HasIndex(new[] { "SolarSystemId" }, "solarSystemID")
                        .HasDatabaseName("solarSystemID1");

                    b.ToTable("chrFactions");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrFriend", b =>
                {
                    b.Property<uint>("CharacterId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("characterID");

                    b.Property<uint>("FriendId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("friendID");

                    b.Property<int?>("Status")
                        .HasColumnType("int(11)")
                        .HasColumnName("status");

                    b.HasKey("CharacterId", "FriendId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "FriendId" }, "fk_friendID_idx");

                    b.ToTable("chrFriends");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrHair", b =>
                {
                    b.Property<uint>("HairId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("hairID");

                    b.Property<string>("HairName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("hairName")
                        .HasDefaultValueSql("''");

                    b.HasKey("HairId")
                        .HasName("PRIMARY");

                    b.ToTable("chrHairs");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrInformation", b =>
                {
                    b.Property<uint>("CharacterId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("characterID");

                    b.Property<uint?>("AccessoryId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("accessoryID");

                    b.Property<uint?>("AccountId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("accountID");

                    b.Property<uint?>("ActiveCloneId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("activeCloneID");

                    b.Property<uint>("AncestryId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("ancestryID");

                    b.Property<uint>("BackgroundId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("backgroundID");

                    b.Property<int?>("BaseId")
                        .HasColumnType("int(11)")
                        .HasColumnName("baseID");

                    b.Property<uint?>("BeardId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("beardID");

                    b.Property<sbyte?>("BlockRoles")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("blockRoles");

                    b.Property<double>("Bounty")
                        .HasColumnType("double")
                        .HasColumnName("bounty");

                    b.Property<double>("CamPos1")
                        .HasColumnType("double")
                        .HasColumnName("camPos1");

                    b.Property<double>("CamPos2")
                        .HasColumnType("double")
                        .HasColumnName("camPos2");

                    b.Property<double>("CamPos3")
                        .HasColumnType("double")
                        .HasColumnName("camPos3");

                    b.Property<uint>("CareerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("careerID");

                    b.Property<uint>("CareerSpecialityId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("careerSpecialityID");

                    b.Property<uint>("ConstellationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("constellationID");

                    b.Property<int>("CorpAccountKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("corpAccountKey")
                        .HasDefaultValueSql("'1000'");

                    b.Property<long?>("CorpStasisTime")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("corpStasisTime");

                    b.Property<ulong>("CorporationDateTime")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("corporationDateTime");

                    b.Property<uint>("CorporationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("corporationID");

                    b.Property<uint>("CostumeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("costumeID");

                    b.Property<ulong>("CreateDateTime")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("createDateTime");

                    b.Property<uint?>("DecoId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("decoID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<double>("EyeRotation1")
                        .HasColumnType("double")
                        .HasColumnName("eyeRotation1");

                    b.Property<double>("EyeRotation2")
                        .HasColumnType("double")
                        .HasColumnName("eyeRotation2");

                    b.Property<double>("EyeRotation3")
                        .HasColumnType("double")
                        .HasColumnName("eyeRotation3");

                    b.Property<uint>("EyebrowsId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("eyebrowsID");

                    b.Property<uint>("EyesId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("eyesID");

                    b.Property<int>("FreeRespecs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("freeRespecs")
                        .HasDefaultValueSql("'2'");

                    b.Property<bool>("Gender")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("gender");

                    b.Property<long>("GrantableRoles")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("grantableRoles");

                    b.Property<long>("GrantableRolesAtBase")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("grantableRolesAtBase");

                    b.Property<long>("GrantableRolesAtHq")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("grantableRolesAtHQ");

                    b.Property<long>("GrantableRolesAtOther")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("grantableRolesAtOther");

                    b.Property<uint>("HairId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("hairID");

                    b.Property<double>("HeadRotation1")
                        .HasColumnType("double")
                        .HasColumnName("headRotation1");

                    b.Property<double>("HeadRotation2")
                        .HasColumnType("double")
                        .HasColumnName("headRotation2");

                    b.Property<double>("HeadRotation3")
                        .HasColumnType("double")
                        .HasColumnName("headRotation3");

                    b.Property<long>("LastOnline")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("lastOnline");

                    b.Property<uint>("LightId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("lightID");

                    b.Property<uint?>("LipstickId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("lipstickID");

                    b.Property<long>("LogoffDateTime")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("logoffDateTime");

                    b.Property<long>("LogonDateTime")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("logonDateTime");

                    b.Property<uint>("LogonMinutes")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("logonMinutes");

                    b.Property<uint?>("MakeupId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("makeupID");

                    b.Property<double?>("Morph1e")
                        .HasColumnType("double")
                        .HasColumnName("morph1e");

                    b.Property<double?>("Morph1n")
                        .HasColumnType("double")
                        .HasColumnName("morph1n");

                    b.Property<double?>("Morph1s")
                        .HasColumnType("double")
                        .HasColumnName("morph1s");

                    b.Property<double?>("Morph1w")
                        .HasColumnType("double")
                        .HasColumnName("morph1w");

                    b.Property<double?>("Morph2e")
                        .HasColumnType("double")
                        .HasColumnName("morph2e");

                    b.Property<double?>("Morph2n")
                        .HasColumnType("double")
                        .HasColumnName("morph2n");

                    b.Property<double?>("Morph2s")
                        .HasColumnType("double")
                        .HasColumnName("morph2s");

                    b.Property<double?>("Morph2w")
                        .HasColumnType("double")
                        .HasColumnName("morph2w");

                    b.Property<double?>("Morph3e")
                        .HasColumnType("double")
                        .HasColumnName("morph3e");

                    b.Property<double?>("Morph3n")
                        .HasColumnType("double")
                        .HasColumnName("morph3n");

                    b.Property<double?>("Morph3s")
                        .HasColumnType("double")
                        .HasColumnName("morph3s");

                    b.Property<double?>("Morph3w")
                        .HasColumnType("double")
                        .HasColumnName("morph3w");

                    b.Property<double?>("Morph4e")
                        .HasColumnType("double")
                        .HasColumnName("morph4e");

                    b.Property<double?>("Morph4n")
                        .HasColumnType("double")
                        .HasColumnName("morph4n");

                    b.Property<double?>("Morph4s")
                        .HasColumnType("double")
                        .HasColumnName("morph4s");

                    b.Property<double?>("Morph4w")
                        .HasColumnType("double")
                        .HasColumnName("morph4w");

                    b.Property<long>("NextRespecTime")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("nextRespecTime");

                    b.Property<bool>("Online")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("online");

                    b.Property<string>("PetitionMessage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)")
                        .HasColumnName("petitionMessage")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("RegionId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("regionID");

                    b.Property<ulong>("Roles")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("roles");

                    b.Property<ulong>("RolesAtBase")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("rolesAtBase");

                    b.Property<ulong>("RolesAtHq")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("rolesAtHQ");

                    b.Property<ulong>("RolesAtOther")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("rolesAtOther");

                    b.Property<uint>("SchoolId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("schoolID");

                    b.Property<double>("SecurityRating")
                        .HasColumnType("double")
                        .HasColumnName("securityRating");

                    b.Property<uint>("SkinId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("skinID");

                    b.Property<uint>("SolarSystemId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("solarSystemID");

                    b.Property<ulong>("StartDateTime")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("startDateTime");

                    b.Property<uint>("StationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("stationID");

                    b.Property<long>("TimeLastJump")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("timeLastJump");

                    b.Property<string>("Title")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("TitleMask")
                        .HasColumnType("int(20) unsigned")
                        .HasColumnName("titleMask");

                    b.Property<int?>("WarfactionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("warfactionID");

                    b.HasKey("CharacterId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountId" }, "FK_CHARACTER__ACCOUNTS");

                    b.HasIndex(new[] { "AccessoryId" }, "FK_CHARACTER__CHRACCESSORIES");

                    b.HasIndex(new[] { "AncestryId" }, "FK_CHARACTER__CHRANCESTRIES");

                    b.HasIndex(new[] { "BackgroundId" }, "FK_CHARACTER__CHRBACKGROUNDS");

                    b.HasIndex(new[] { "BeardId" }, "FK_CHARACTER__CHRBEARDS");

                    b.HasIndex(new[] { "CareerId" }, "FK_CHARACTER__CHRCAREERS");

                    b.HasIndex(new[] { "CareerSpecialityId" }, "FK_CHARACTER__CHRCAREERSPECIALITIES");

                    b.HasIndex(new[] { "CostumeId" }, "FK_CHARACTER__CHRCOSTUMES");

                    b.HasIndex(new[] { "DecoId" }, "FK_CHARACTER__CHRDECOS");

                    b.HasIndex(new[] { "EyebrowsId" }, "FK_CHARACTER__CHREYEBROWS");

                    b.HasIndex(new[] { "EyesId" }, "FK_CHARACTER__CHREYES");

                    b.HasIndex(new[] { "HairId" }, "FK_CHARACTER__CHRHAIRS");

                    b.HasIndex(new[] { "LightId" }, "FK_CHARACTER__CHRLIGHTS");

                    b.HasIndex(new[] { "LipstickId" }, "FK_CHARACTER__CHRLIPSTICKS");

                    b.HasIndex(new[] { "MakeupId" }, "FK_CHARACTER__CHRMAKEUPS");

                    b.HasIndex(new[] { "SchoolId" }, "FK_CHARACTER__CHRSCHOOLS");

                    b.HasIndex(new[] { "SkinId" }, "FK_CHARACTER__CHRSKINS");

                    b.ToTable("chrInformation");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrLight", b =>
                {
                    b.Property<uint>("LightId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("lightID");

                    b.Property<string>("LightName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("lightName")
                        .HasDefaultValueSql("''");

                    b.HasKey("LightId")
                        .HasName("PRIMARY");

                    b.ToTable("chrLights");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrLipstick", b =>
                {
                    b.Property<uint>("LipstickId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("lipstickID");

                    b.Property<string>("LipstickName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("lipstickName")
                        .HasDefaultValueSql("''");

                    b.HasKey("LipstickId")
                        .HasName("PRIMARY");

                    b.ToTable("chrLipsticks");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrLpbalance", b =>
                {
                    b.Property<uint>("CharacterId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("characterID");

                    b.Property<uint>("CorporationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("corporationID");

                    b.Property<double>("Balance")
                        .HasColumnType("double")
                        .HasColumnName("balance");

                    b.HasKey("CharacterId", "CorporationId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("chrLPbalance");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrMakeup", b =>
                {
                    b.Property<uint>("MakeupId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("makeupID");

                    b.Property<string>("MakeupName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("makeupName")
                        .HasDefaultValueSql("''");

                    b.HasKey("MakeupId")
                        .HasName("PRIMARY");

                    b.ToTable("chrMakeups");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrMedal", b =>
                {
                    b.Property<uint>("MedalId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("medalID");

                    b.Property<uint>("OwnerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("ownerID");

                    b.Property<long>("Date")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("date");

                    b.Property<uint>("IssuerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("issuerID");

                    b.Property<int>("Reason")
                        .HasColumnType("int(11)")
                        .HasColumnName("reason");

                    b.Property<int>("Status")
                        .HasColumnType("int(11)")
                        .HasColumnName("status");

                    b.HasKey("MedalId", "OwnerId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "IssuerId" }, "issuerID");

                    b.HasIndex(new[] { "OwnerId" }, "ownerID");

                    b.ToTable("chrMedals");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrMissionState", b =>
                {
                    b.Property<uint>("CharacterId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("characterID");

                    b.Property<uint>("MissionId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("missionID");

                    b.Property<ulong>("ExpirationTime")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("expirationTime");

                    b.Property<byte>("MissionState")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("missionState");

                    b.HasKey("CharacterId", "MissionId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "MissionId" }, "missionID")
                        .HasDatabaseName("missionID1");

                    b.ToTable("chrMissionState");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrNote", b =>
                {
                    b.Property<uint>("ItemId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("itemID");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<uint?>("OwnerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("ownerID");

                    b.ToTable("chrNotes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrNpcstanding", b =>
                {
                    b.Property<uint>("CharacterId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("characterID");

                    b.Property<uint>("FromId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fromID");

                    b.Property<double>("Standing")
                        .HasColumnType("double")
                        .HasColumnName("standing");

                    b.HasKey("CharacterId", "FromId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("chrNPCStandings");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrOffer", b =>
                {
                    b.Property<uint>("CharacterId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("characterID");

                    b.Property<uint>("OfferId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("offerID");

                    b.Property<ulong>("ExpirationTime")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("expirationTime");

                    b.HasKey("CharacterId", "OfferId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "OfferId" }, "offerID")
                        .HasDatabaseName("offerID1");

                    b.ToTable("chrOffers");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrOwnerNote", b =>
                {
                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<uint>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("noteID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("NoteId"));

                    b.Property<uint>("OwnerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("ownerID");

                    b.HasIndex(new[] { "NoteId" }, "noteID")
                        .IsUnique();

                    b.ToTable("chrOwnerNote");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrRace", b =>
                {
                    b.Property<byte>("RaceId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("raceID");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<short?>("GraphicId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("graphicID");

                    b.Property<string>("RaceName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("raceName");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("shortDescription");

                    b.HasKey("RaceId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GraphicId" }, "graphicID")
                        .HasDatabaseName("graphicID5");

                    b.ToTable("chrRaces");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrRaceSkill", b =>
                {
                    b.Property<byte>("RaceId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("raceID");

                    b.Property<short>("SkillTypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("skillTypeID");

                    b.Property<sbyte?>("Levels")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("levels");

                    b.HasKey("RaceId", "SkillTypeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "SkillTypeId" }, "skillTypeID");

                    b.ToTable("chrRaceSkills");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrSchool", b =>
                {
                    b.Property<byte>("SchoolId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("schoolID");

                    b.Property<byte?>("CareerId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("careerID");

                    b.Property<int?>("CorporationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("corporationID");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<short?>("GraphicId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("graphicID");

                    b.Property<int?>("NewAgentId")
                        .HasColumnType("int(11)")
                        .HasColumnName("newAgentID");

                    b.Property<byte?>("RaceId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("raceID");

                    b.Property<string>("SchoolName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("schoolName");

                    b.HasKey("SchoolId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CareerId" }, "careerID")
                        .HasDatabaseName("careerID1");

                    b.HasIndex(new[] { "CorporationId" }, "corporationID")
                        .HasDatabaseName("corporationID3");

                    b.HasIndex(new[] { "GraphicId" }, "graphicID")
                        .HasDatabaseName("graphicID6");

                    b.HasIndex(new[] { "NewAgentId" }, "newAgentID");

                    b.HasIndex(new[] { "RaceId" }, "raceID")
                        .HasDatabaseName("raceID2");

                    b.ToTable("chrSchools");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrSchoolAgent", b =>
                {
                    b.Property<byte>("SchoolId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("schoolID");

                    b.Property<sbyte>("AgentIndex")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("agentIndex");

                    b.Property<int?>("AgentId")
                        .HasColumnType("int(11)")
                        .HasColumnName("agentID");

                    b.HasKey("SchoolId", "AgentIndex")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "AgentId" }, "agentID");

                    b.ToTable("chrSchoolAgents");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrShipInsurance", b =>
                {
                    b.Property<uint>("InsuranceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("insuranceID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("InsuranceId"));

                    b.Property<long>("EndDate")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("endDate");

                    b.Property<int>("Fraction")
                        .HasColumnType("int(10)")
                        .HasColumnName("fraction");

                    b.Property<uint>("OwnerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("ownerID");

                    b.Property<uint>("ShipId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("shipID");

                    b.Property<long>("StartDate")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("startDate");

                    b.HasKey("InsuranceId")
                        .HasName("PRIMARY");

                    b.ToTable("chrShipInsurances");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrSkillHistory", b =>
                {
                    b.Property<uint>("CharacterId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("characterID");

                    b.Property<uint>("SkillTypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("skillTypeID");

                    b.Property<int>("EventId")
                        .HasColumnType("int(10)")
                        .HasColumnName("eventID");

                    b.Property<long>("LogDateTime")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("logDateTime");

                    b.Property<double>("AbsolutePoints")
                        .HasColumnType("double")
                        .HasColumnName("absolutePoints");

                    b.HasKey("CharacterId", "SkillTypeId", "EventId", "LogDateTime")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

                    b.ToTable("chrSkillHistory");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrSkillQueue", b =>
                {
                    b.Property<uint>("CharacterId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("characterID");

                    b.Property<uint>("Level")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("level");

                    b.Property<uint>("OrderIndex")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("orderIndex");

                    b.Property<uint>("SkillItemId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("skillItemID");

                    b.ToTable("chrSkillQueue");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrSkin", b =>
                {
                    b.Property<uint>("SkinId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("skinID");

                    b.Property<string>("SkinName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("skinName")
                        .HasDefaultValueSql("''");

                    b.HasKey("SkinId")
                        .HasName("PRIMARY");

                    b.ToTable("chrSkins");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrStanding", b =>
                {
                    b.Property<uint>("CharacterId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("characterID");

                    b.Property<uint>("ToId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("toID");

                    b.Property<double>("Standing")
                        .HasColumnType("double")
                        .HasColumnName("standing");

                    b.HasKey("CharacterId", "ToId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("chrStandings");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrStandingTransaction", b =>
                {
                    b.Property<uint>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("eventID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("EventId"));

                    b.Property<uint>("FromId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fromID");

                    b.Property<uint>("ToId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("toID");

                    b.Property<uint>("Direction")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("direction");

                    b.Property<ulong>("EventDateTime")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("eventDateTime");

                    b.Property<uint>("EventTypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("eventTypeID");

                    b.Property<uint>("Int1")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("int_1");

                    b.Property<uint>("Int2")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("int_2");

                    b.Property<uint>("Int3")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("int_3");

                    b.Property<double>("Modification")
                        .HasColumnType("double")
                        .HasColumnName("modification");

                    b.Property<string>("Msg")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("msg");

                    b.HasKey("EventId", "FromId", "ToId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("chrStandingTransactions");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrVote", b =>
                {
                    b.Property<int>("OptionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("optionID");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int(11)")
                        .HasColumnName("characterID");

                    b.HasKey("OptionId", "CharacterId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("chrVotes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CluAddress", b =>
                {
                    b.Property<string>("Type")
                        .HasMaxLength(30)
                        .HasColumnType("char(30)")
                        .HasColumnName("type")
                        .IsFixedLength();

                    b.Property<int>("ObjectId")
                        .HasColumnType("int(11)")
                        .HasColumnName("objectID");

                    b.Property<long>("NodeId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("nodeID");

                    b.HasKey("Type", "ObjectId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("cluAddresses");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.Cluster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("Address")
                        .HasColumnType("char(36)")
                        .HasColumnName("address");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("char(15)")
                        .HasColumnName("ip")
                        .IsFixedLength();

                    b.Property<long>("LastHeartBeat")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("lastHeartBeat");

                    b.Property<double>("Load")
                        .HasColumnType("double")
                        .HasColumnName("load");

                    b.Property<int>("Port")
                        .HasColumnType("int(11)")
                        .HasColumnName("port");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("char(6)")
                        .HasColumnName("role")
                        .IsFixedLength();

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("cluster");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ConBid", b =>
                {
                    b.Property<uint>("BidId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("bidID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("BidId"));

                    b.Property<double>("Amount")
                        .HasColumnType("double unsigned")
                        .HasColumnName("amount");

                    b.Property<uint>("BidderId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("bidderID");

                    b.Property<uint>("ContractId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("contractID");

                    b.Property<byte>("ForCorp")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("forCorp");

                    b.Property<int>("WalletKey")
                        .HasColumnType("int(11)")
                        .HasColumnName("walletKey");

                    b.HasKey("BidId")
                        .HasName("PRIMARY");

                    b.ToTable("conBids");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ConContract", b =>
                {
                    b.Property<uint>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("contractID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("ContractId"));

                    b.Property<int?>("AcceptorId")
                        .HasColumnType("int(10)")
                        .HasColumnName("acceptorID");

                    b.Property<uint?>("AcceptorWalletKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("acceptorWalletKey")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("AssigneeId")
                        .HasColumnType("int(10)")
                        .HasColumnName("assigneeID");

                    b.Property<int>("Availability")
                        .HasColumnType("int(10)")
                        .HasColumnName("availability");

                    b.Property<double>("Collateral")
                        .HasColumnType("double(22,0)")
                        .HasColumnName("collateral");

                    b.Property<uint?>("CrateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("crateID")
                        .HasDefaultValueSql("'0'");

                    b.Property<long>("DateAccepted")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("dateAccepted");

                    b.Property<long>("DateCompleted")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("dateCompleted");

                    b.Property<long>("DateExpired")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("dateExpired");

                    b.Property<long>("DateIssued")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("dateIssued");

                    b.Property<string>("Description")
                        .HasColumnType("mediumtext")
                        .HasColumnName("description");

                    b.Property<uint?>("EndStationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("endStationID");

                    b.Property<int>("Expiretime")
                        .HasColumnType("int(10)")
                        .HasColumnName("expiretime");

                    b.Property<bool>("ForCorp")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("forCorp");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isAccepted");

                    b.Property<uint?>("IssuerAllianceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("issuerAllianceID")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("IssuerCorpId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("issuerCorpID");

                    b.Property<uint>("IssuerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("issuerID");

                    b.Property<uint>("IssuerWalletKey")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("issuerWalletKey");

                    b.Property<int>("NumDays")
                        .HasColumnType("int(10)")
                        .HasColumnName("numDays");

                    b.Property<double>("Price")
                        .HasColumnType("double(22,0)")
                        .HasColumnName("price");

                    b.Property<double>("Reward")
                        .HasColumnType("double(22,0)")
                        .HasColumnName("reward");

                    b.Property<uint>("StartStationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("startStationID");

                    b.Property<int>("Status")
                        .HasColumnType("int(10)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("int(10)")
                        .HasColumnName("type");

                    b.Property<double?>("Volume")
                        .HasColumnType("double(22,0)")
                        .HasColumnName("volume");

                    b.HasKey("ContractId")
                        .HasName("PRIMARY");

                    b.ToTable("conContracts");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ConItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractId")
                        .HasColumnType("int(10)")
                        .HasColumnName("contractID");

                    b.Property<bool>("InCrate")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("inCrate");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int(11)")
                        .HasColumnName("itemID");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int(10)")
                        .HasColumnName("itemTypeID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(10)")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("conItems");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.Corporation", b =>
                {
                    b.Property<uint>("CorporationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("corporationID");

                    b.Property<uint?>("AllianceId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("allianceID");

                    b.Property<uint>("AllowedMemberRaceIds")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("allowedMemberRaceIDs");

                    b.Property<uint>("CeoId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("ceoID");

                    b.Property<int?>("ChosenExecutorId")
                        .HasColumnType("int(11)")
                        .HasColumnName("chosenExecutorID");

                    b.Property<uint?>("Color1")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("color1");

                    b.Property<uint?>("Color2")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("color2");

                    b.Property<uint?>("Color3")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("color3");

                    b.Property<string>("CorporationName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("corporationName")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("CorporationType")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("corporationType");

                    b.Property<uint>("CreatorId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("creatorID");

                    b.Property<byte>("Deleted")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("description");

                    b.Property<string>("Division1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("division1")
                        .HasDefaultValueSql("'1st Division'");

                    b.Property<string>("Division2")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("division2")
                        .HasDefaultValueSql("'2nd Division'");

                    b.Property<string>("Division3")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("division3")
                        .HasDefaultValueSql("'3rd Division'");

                    b.Property<string>("Division4")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("division4")
                        .HasDefaultValueSql("'4th Division'");

                    b.Property<string>("Division5")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("division5")
                        .HasDefaultValueSql("'5th Division'");

                    b.Property<string>("Division6")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("division6")
                        .HasDefaultValueSql("'6th Division'");

                    b.Property<string>("Division7")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("division7")
                        .HasDefaultValueSql("'7th Division'");

                    b.Property<uint>("GraphicId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("graphicID");

                    b.Property<byte>("HasPlayerPersonnelManager")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("hasPlayerPersonnelManager");

                    b.Property<uint>("MemberCount")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("memberCount");

                    b.Property<uint>("MemberLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("memberLimit")
                        .HasDefaultValueSql("'10'");

                    b.Property<double>("MinimumJoinStanding")
                        .HasColumnType("double")
                        .HasColumnName("minimumJoinStanding");

                    b.Property<uint?>("RaceId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("raceID");

                    b.Property<byte>("SendCharTerminationMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("sendCharTerminationMessage")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint?>("Shape1")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("shape1");

                    b.Property<uint?>("Shape2")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("shape2");

                    b.Property<uint?>("Shape3")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("shape3");

                    b.Property<ulong>("Shares")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("shares")
                        .HasDefaultValueSql("'1000'");

                    b.Property<long?>("StartDate")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("startDate");

                    b.Property<uint>("StationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("stationID");

                    b.Property<double>("TaxRate")
                        .HasColumnType("double")
                        .HasColumnName("taxRate");

                    b.Property<string>("TickerName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("tickerName")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Typeface")
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("typeface");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("url");

                    b.Property<string>("WalletDivision1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("walletDivision1")
                        .HasDefaultValueSql("'Master wallet'");

                    b.Property<string>("WalletDivision2")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("walletDivision2")
                        .HasDefaultValueSql("'2nd Wallet Division'");

                    b.Property<string>("WalletDivision3")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("walletDivision3")
                        .HasDefaultValueSql("'3rd Wallet Division'");

                    b.Property<string>("WalletDivision4")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("walletDivision4")
                        .HasDefaultValueSql("'4th Wallet Division'");

                    b.Property<string>("WalletDivision5")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("walletDivision5")
                        .HasDefaultValueSql("'5th Wallet Division'");

                    b.Property<string>("WalletDivision6")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("walletDivision6")
                        .HasDefaultValueSql("'6th Wallet Division'");

                    b.Property<string>("WalletDivision7")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("walletDivision7")
                        .HasDefaultValueSql("'7th Wallet Division'");

                    b.HasKey("CorporationId")
                        .HasName("PRIMARY");

                    b.ToTable("corporation");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CourierMission", b =>
                {
                    b.Property<uint>("MissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("missionID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("MissionId"));

                    b.Property<double>("AcceptFee")
                        .HasColumnType("double")
                        .HasColumnName("acceptFee");

                    b.Property<uint?>("AcceptorId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("acceptorID");

                    b.Property<uint?>("AssigneeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("assigneeID");

                    b.Property<uint?>("AvailabilityId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("availabilityID");

                    b.Property<uint?>("CraterId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("craterID");

                    b.Property<uint>("DateAccepted")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("dateAccepted");

                    b.Property<uint>("DateCompleted")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("dateCompleted");

                    b.Property<uint>("DateExpires")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("dateExpires");

                    b.Property<uint>("DateIssued")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("dateIssued");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<uint?>("DropRegionId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("dropRegionID");

                    b.Property<uint?>("DropSolarSystemId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("dropSolarSystemID");

                    b.Property<uint?>("DropStationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("dropStationID");

                    b.Property<byte>("InOrder")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("inOrder");

                    b.Property<uint?>("IssuerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("issuerID");

                    b.Property<byte>("Kind")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("kind");

                    b.Property<uint?>("PickupRegionId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("pickupRegionID");

                    b.Property<uint?>("PickupSolarSystemId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("pickupSolarSystemID");

                    b.Property<uint?>("PickupStationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("pickupStationID");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("state");

                    b.Property<double>("TotalReward")
                        .HasColumnType("double")
                        .HasColumnName("totalReward");

                    b.Property<byte>("Tracking")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("tracking");

                    b.Property<double>("Volume")
                        .HasColumnType("double")
                        .HasColumnName("volume");

                    b.HasKey("MissionId")
                        .HasName("PRIMARY");

                    b.ToTable("courierMissions");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpActivity", b =>
                {
                    b.Property<byte>("ActivityId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("activityID");

                    b.Property<string>("ActivityName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("activityName");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.HasKey("ActivityId")
                        .HasName("PRIMARY");

                    b.ToTable("crpActivities");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpAlliance", b =>
                {
                    b.Property<int>("AllianceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("allianceID");

                    b.Property<int>("CreatorCharId")
                        .HasColumnType("int(11)")
                        .HasColumnName("creatorCharID");

                    b.Property<int>("CreatorCorpId")
                        .HasColumnType("int(11)")
                        .HasColumnName("creatorCorpID");

                    b.Property<sbyte>("Deleted")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("mediumtext")
                        .HasColumnName("description")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("Dictatorial")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("dictatorial");

                    b.Property<int?>("ExecutorCorpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("executorCorpID")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("shortName")
                        .HasDefaultValueSql("''");

                    b.Property<long>("StartDate")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("startDate");

                    b.Property<string>("Url")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("AllianceId")
                        .HasName("PRIMARY");

                    b.ToTable("crpAlliances");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpApplication", b =>
                {
                    b.Property<uint>("CorporationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("corporationID");

                    b.Property<uint>("AllianceId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("allianceID");

                    b.Property<ulong>("ApplicationDateTime")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("applicationDateTime");

                    b.Property<string>("ApplicationText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("applicationText");

                    b.Property<ulong>("ApplicationUpdateTime")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("applicationUpdateTime");

                    b.Property<uint>("State")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("state");

                    b.HasKey("CorporationId")
                        .HasName("PRIMARY");

                    b.ToTable("crpApplications");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpAuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CharId")
                        .HasColumnType("int(11)")
                        .HasColumnName("charID");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("corporationID");

                    b.Property<long>("EventDateTime")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("eventDateTime");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int(4)")
                        .HasColumnName("eventTypeID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CorporationId" }, "corporationID")
                        .HasDatabaseName("corporationID4");

                    b.ToTable("crpAuditLog");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpAuditRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ChangeTime")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("changeTime");

                    b.Property<int>("CharId")
                        .HasColumnType("int(11)")
                        .HasColumnName("charID");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("corporationID");

                    b.Property<bool>("Grantable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("grantable");

                    b.Property<int>("IssuerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("issuerID");

                    b.Property<long>("NewRoles")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("newRoles");

                    b.Property<long>("OldRoles")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("oldRoles");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ChangeTime" }, "changeTime");

                    b.HasIndex(new[] { "CharId" }, "characterID");

                    b.HasIndex(new[] { "CorporationId" }, "corporationID")
                        .HasDatabaseName("corporationID5");

                    b.ToTable("crpAuditRole");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpMedal", b =>
                {
                    b.Property<int>("MedalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("medalID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MedalId"));

                    b.Property<int>("CorporationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("corporationID");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int(11)")
                        .HasColumnName("creatorID");

                    b.Property<long?>("Date")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("NoRecepients")
                        .HasColumnType("int(11)")
                        .HasColumnName("noRecepients");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("MedalId")
                        .HasName("PRIMARY");

                    b.ToTable("crpMedals");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpMedalPart", b =>
                {
                    b.Property<int>("MedalId")
                        .HasColumnType("int(11)")
                        .HasColumnName("medalID");

                    b.Property<int>("Index")
                        .HasColumnType("int(11)")
                        .HasColumnName("index");

                    b.Property<int?>("Color")
                        .HasColumnType("int(11)")
                        .HasColumnName("color");

                    b.Property<string>("Graphic")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("graphic");

                    b.Property<int>("Part")
                        .HasColumnType("int(11)")
                        .HasColumnName("part");

                    b.HasKey("MedalId", "Index")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("crpMedalParts");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpNpccorporation", b =>
                {
                    b.Property<int>("CorporationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("corporationID");

                    b.Property<int?>("Border")
                        .HasColumnType("int(11)")
                        .HasColumnName("border");

                    b.Property<int?>("Corridor")
                        .HasColumnType("int(11)")
                        .HasColumnName("corridor");

                    b.Property<int?>("EnemyId")
                        .HasColumnType("int(11)")
                        .HasColumnName("enemyID");

                    b.Property<string>("Extent")
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("extent");

                    b.Property<int?>("FactionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("factionID");

                    b.Property<int?>("FriendId")
                        .HasColumnType("int(11)")
                        .HasColumnName("friendID");

                    b.Property<int?>("Fringe")
                        .HasColumnType("int(11)")
                        .HasColumnName("fringe");

                    b.Property<int?>("Hub")
                        .HasColumnType("int(11)")
                        .HasColumnName("hub");

                    b.Property<int?>("InitialPrice")
                        .HasColumnType("int(11)")
                        .HasColumnName("initialPrice");

                    b.Property<int?>("InvestorId1")
                        .HasColumnType("int(11)")
                        .HasColumnName("investorID1");

                    b.Property<int?>("InvestorId2")
                        .HasColumnType("int(11)")
                        .HasColumnName("investorID2");

                    b.Property<int?>("InvestorId3")
                        .HasColumnType("int(11)")
                        .HasColumnName("investorID3");

                    b.Property<int?>("InvestorId4")
                        .HasColumnType("int(11)")
                        .HasColumnName("investorID4");

                    b.Property<int?>("InvestorShares1")
                        .HasColumnType("int(11)")
                        .HasColumnName("investorShares1");

                    b.Property<int?>("InvestorShares2")
                        .HasColumnType("int(11)")
                        .HasColumnName("investorShares2");

                    b.Property<int?>("InvestorShares3")
                        .HasColumnType("int(11)")
                        .HasColumnName("investorShares3");

                    b.Property<int?>("InvestorShares4")
                        .HasColumnType("int(11)")
                        .HasColumnName("investorShares4");

                    b.Property<int?>("MainActivityId")
                        .HasColumnType("int(11)")
                        .HasColumnName("mainActivityID");

                    b.Property<double?>("MinSecurity")
                        .HasColumnType("double")
                        .HasColumnName("minSecurity");

                    b.Property<int?>("PublicShares")
                        .HasColumnType("int(11)")
                        .HasColumnName("publicShares");

                    b.Property<int?>("Scattered")
                        .HasColumnType("int(11)")
                        .HasColumnName("scattered");

                    b.Property<int?>("SecondaryActivityId")
                        .HasColumnType("int(11)")
                        .HasColumnName("secondaryActivityID");

                    b.Property<string>("Size")
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("size");

                    b.Property<double?>("SizeFactor")
                        .HasColumnType("double")
                        .HasColumnName("sizeFactor");

                    b.Property<int?>("SolarSystemId")
                        .HasColumnType("int(11)")
                        .HasColumnName("solarSystemID");

                    b.Property<int?>("StationCount")
                        .HasColumnType("int(11)")
                        .HasColumnName("stationCount");

                    b.Property<int?>("StationSystemCount")
                        .HasColumnType("int(11)")
                        .HasColumnName("stationSystemCount");

                    b.HasKey("CorporationId")
                        .HasName("PRIMARY");

                    b.ToTable("crpNPCCorporations");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpNpccorporationDivision", b =>
                {
                    b.Property<int>("CorporationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("corporationID");

                    b.Property<byte>("DivisionId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("divisionID");

                    b.Property<sbyte?>("Size")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("size");

                    b.HasKey("CorporationId", "DivisionId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "DivisionId" }, "divisionID")
                        .HasDatabaseName("divisionID3");

                    b.ToTable("crpNPCCorporationDivisions");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpNpccorporationResearchField", b =>
                {
                    b.Property<short>("SkillId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("skillID");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("corporationID");

                    b.HasKey("SkillId", "CorporationId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "CorporationId" }, "corporationID")
                        .HasDatabaseName("corporationID6");

                    b.ToTable("crpNPCCorporationResearchFields");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpNpccorporationTrade", b =>
                {
                    b.Property<int?>("CorporationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("corporationID");

                    b.Property<double?>("SupplyDemand")
                        .HasColumnType("double")
                        .HasColumnName("supplyDemand");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("typeID");

                    b.ToTable("crpNPCCorporationTrades");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpNpcdivision", b =>
                {
                    b.Property<byte>("DivisionId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("divisionID");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("DivisionName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("divisionName");

                    b.Property<string>("LeaderType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("leaderType");

                    b.HasKey("DivisionId")
                        .HasName("PRIMARY");

                    b.ToTable("crpNPCDivisions");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpNpctickerName", b =>
                {
                    b.Property<uint>("CorporationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("corporationID");

                    b.Property<string>("Color1")
                        .HasColumnType("text")
                        .HasColumnName("color1");

                    b.Property<string>("Color2")
                        .HasColumnType("text")
                        .HasColumnName("color2");

                    b.Property<string>("Color3")
                        .HasColumnType("text")
                        .HasColumnName("color3");

                    b.Property<uint?>("Shape1")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("shape1");

                    b.Property<uint?>("Shape2")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("shape2");

                    b.Property<uint?>("Shape3")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("shape3");

                    b.Property<string>("TickerName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("tickerName")
                        .HasDefaultValueSql("''");

                    b.HasKey("CorporationId")
                        .HasName("PRIMARY");

                    b.ToTable("crpNPCTickerNames");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpOffice", b =>
                {
                    b.Property<uint>("CorporationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("corporationID");

                    b.Property<uint>("StationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("stationID");

                    b.Property<long?>("BalanceDueDate")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("balanceDueDate");

                    b.Property<bool>("Impounded")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("impounded");

                    b.Property<uint>("NextBillId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("nextBillID");

                    b.Property<uint>("OfficeFolderId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("officeFolderID");

                    b.Property<uint>("OfficeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("officeID");

                    b.Property<double>("PeriodCost")
                        .HasColumnType("double(22,0)")
                        .HasColumnName("periodCost");

                    b.Property<int>("RentPeriodInDays")
                        .HasColumnType("int(11)")
                        .HasColumnName("rentPeriodInDays");

                    b.Property<long>("StartDate")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("startDate");

                    b.HasKey("CorporationId", "StationId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "OfficeFolderId" }, "officeFolderID");

                    b.ToTable("crpOffices");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpRecruitmentAd", b =>
                {
                    b.Property<int>("AdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("adID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AdId"));

                    b.Property<int>("CorporationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("corporationID");

                    b.Property<long>("CreateDateTime")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("createDateTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasDefaultValueSql("'0'");

                    b.Property<long>("ExpiryDateTime")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("expiryDateTime");

                    b.Property<double>("MinimumSkillPoints")
                        .HasColumnType("double")
                        .HasColumnName("minimumSkillPoints");

                    b.Property<int>("RaceMask")
                        .HasColumnType("int(11)")
                        .HasColumnName("raceMask");

                    b.Property<int>("StationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("stationID");

                    b.Property<int>("TypeMask")
                        .HasColumnType("int(11)")
                        .HasColumnName("typeMask");

                    b.HasKey("AdId")
                        .HasName("PRIMARY");

                    b.ToTable("crpRecruitmentAds");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpRecruitmentAdGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("groupID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<int>("DataId")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataID");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("groupName")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("GroupId")
                        .HasName("PRIMARY");

                    b.ToTable("crpRecruitmentAdGroups");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpRecruitmentAdType", b =>
                {
                    b.Property<int>("TypeMask")
                        .HasColumnType("int(11)")
                        .HasColumnName("typeMask");

                    b.Property<int>("DataId")
                        .HasColumnType("int(11)")
                        .HasColumnName("dataID");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.Property<int>("GroupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("groupID");

                    b.Property<string>("TypeName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("typeName");

                    b.HasKey("TypeMask")
                        .HasName("PRIMARY");

                    b.ToTable("crpRecruitmentAdTypes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpRole", b =>
                {
                    b.Property<ulong>("RoleId")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("roleID");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("RoleIid")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("roleIID");

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("roleName");

                    b.Property<string>("ShortDescription")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("shortDescription")
                        .HasDefaultValueSql("''");

                    b.HasKey("RoleId")
                        .HasName("PRIMARY");

                    b.ToTable("crpRoles");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpRoleGroup", b =>
                {
                    b.Property<int>("RoleGroupId")
                        .HasColumnType("int(11)")
                        .HasColumnName("roleGroupID");

                    b.Property<string>("AppliesTo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("appliesTo");

                    b.Property<string>("AppliesToGrantable")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("appliesToGrantable");

                    b.Property<sbyte>("IsDivisional")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("isDivisional");

                    b.Property<string>("RoleGroupName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("roleGroupName");

                    b.Property<long?>("RoleMask")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("roleMask");

                    b.HasKey("RoleGroupId")
                        .HasName("PRIMARY");

                    b.ToTable("crpRoleGroups");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpShare", b =>
                {
                    b.Property<uint>("OwnerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("ownerID");

                    b.Property<uint>("CorporationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("corporationID");

                    b.Property<uint>("Shares")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("shares");

                    b.HasKey("OwnerId", "CorporationId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("crpShares");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpStatic", b =>
                {
                    b.Property<uint>("CorporationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("corporationID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("CorporationId"));

                    b.Property<uint?>("AllianceId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("allianceID");

                    b.Property<uint>("AllowedMemberRaceIds")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("allowedMemberRaceIDs");

                    b.Property<uint>("CeoId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("ceoID");

                    b.Property<uint?>("Color1")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("color1");

                    b.Property<uint?>("Color2")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("color2");

                    b.Property<uint?>("Color3")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("color3");

                    b.Property<string>("CorporationName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("corporationName")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("CorporationType")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("corporationType");

                    b.Property<uint>("CreatorId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("creatorID");

                    b.Property<sbyte>("Deleted")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("description");

                    b.Property<string>("Division1")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("division1")
                        .HasDefaultValueSql("'1st division'");

                    b.Property<string>("Division2")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("division2")
                        .HasDefaultValueSql("'2nd division'");

                    b.Property<string>("Division3")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("division3")
                        .HasDefaultValueSql("'3rd division'");

                    b.Property<string>("Division4")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("division4")
                        .HasDefaultValueSql("'4th division'");

                    b.Property<string>("Division5")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("division5")
                        .HasDefaultValueSql("'5th division'");

                    b.Property<string>("Division6")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("division6")
                        .HasDefaultValueSql("'6th division'");

                    b.Property<string>("Division7")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("division7")
                        .HasDefaultValueSql("'7th division'");

                    b.Property<uint>("GraphicId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("graphicID");

                    b.Property<byte>("HasPlayerPersonnelManager")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("hasPlayerPersonnelManager");

                    b.Property<uint>("MemberCount")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("memberCount");

                    b.Property<uint>("MemberLimit")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("memberLimit");

                    b.Property<double>("MinimumJoinStanding")
                        .HasColumnType("double")
                        .HasColumnName("minimumJoinStanding");

                    b.Property<uint?>("RaceId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("raceID");

                    b.Property<byte>("SendCharTerminationMessage")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("sendCharTerminationMessage");

                    b.Property<uint?>("Shape1")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("shape1");

                    b.Property<uint?>("Shape2")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("shape2");

                    b.Property<uint?>("Shape3")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("shape3");

                    b.Property<ulong>("Shares")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("shares");

                    b.Property<uint>("StationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("stationID");

                    b.Property<double>("TaxRate")
                        .HasColumnType("double")
                        .HasColumnName("taxRate");

                    b.Property<string>("TickerName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("tickerName")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Typeface")
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("typeface");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("url");

                    b.HasKey("CorporationId")
                        .HasName("PRIMARY");

                    b.ToTable("crpStatic");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpTitle", b =>
                {
                    b.Property<uint>("CorporationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("corporationID");

                    b.Property<uint>("TitleId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("titleID");

                    b.Property<ulong>("GrantableRoles")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("grantableRoles");

                    b.Property<ulong>("GrantableRolesAtBase")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("grantableRolesAtBase");

                    b.Property<ulong>("GrantableRolesAtHq")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("grantableRolesAtHQ");

                    b.Property<ulong>("GrantableRolesAtOther")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("grantableRolesAtOther");

                    b.Property<ulong>("Roles")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("roles");

                    b.Property<ulong>("RolesAtBase")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("rolesAtBase");

                    b.Property<ulong>("RolesAtHq")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("rolesAtHQ");

                    b.Property<ulong>("RolesAtOther")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("rolesAtOther");

                    b.Property<string>("TitleName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("titleName");

                    b.HasKey("CorporationId", "TitleId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("crpTitles");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpTitlesTemplate", b =>
                {
                    b.Property<uint>("TitleId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("titleID");

                    b.Property<ulong>("GrantableRoles")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("grantableRoles");

                    b.Property<ulong>("GrantableRolesAtBase")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("grantableRolesAtBase");

                    b.Property<ulong>("GrantableRolesAtHq")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("grantableRolesAtHQ");

                    b.Property<ulong>("GrantableRolesAtOther")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("grantableRolesAtOther");

                    b.Property<ulong>("Roles")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("roles");

                    b.Property<ulong>("RolesAtBase")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("rolesAtBase");

                    b.Property<ulong>("RolesAtHq")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("rolesAtHQ");

                    b.Property<ulong>("RolesAtOther")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("rolesAtOther");

                    b.Property<string>("TitleName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("titleName");

                    b.HasKey("TitleId")
                        .HasName("PRIMARY");

                    b.ToTable("crpTitlesTemplate");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpVote", b =>
                {
                    b.Property<uint>("VoteCaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("voteCaseID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("VoteCaseId"));

                    b.Property<bool>("ActedUpon")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("actedUpon");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int(11)")
                        .HasColumnName("characterID");

                    b.Property<int?>("CorporationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("corporationID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasDefaultValueSql("''");

                    b.Property<long?>("EndDateTime")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("endDateTime");

                    b.Property<long>("Expires")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("expires");

                    b.Property<bool>("InEffect")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("inEffect");

                    b.Property<long?>("StartDateTime")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("startDateTime");

                    b.Property<int>("Status")
                        .HasColumnType("int(11)")
                        .HasColumnName("status");

                    b.Property<long?>("TimeActedUpon")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("timeActedUpon");

                    b.Property<long?>("TimeRescended")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("timeRescended");

                    b.Property<string>("VoteCaseText")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("voteCaseText")
                        .HasDefaultValueSql("''");

                    b.Property<int?>("VoteType")
                        .HasColumnType("int(11)")
                        .HasColumnName("voteType");

                    b.HasKey("VoteCaseId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CorporationId" }, "corporationID")
                        .HasDatabaseName("corporationID7");

                    b.HasIndex(new[] { "VoteType" }, "voteType");

                    b.HasIndex(new[] { "VoteType", "CorporationId" }, "voteType_corporationID");

                    b.ToTable("crpVotes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrpVoteOption", b =>
                {
                    b.Property<uint>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("optionID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("OptionId"));

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("optionText")
                        .HasDefaultValueSql("''");

                    b.Property<int>("Parameter")
                        .HasColumnType("int(11)")
                        .HasColumnName("parameter");

                    b.Property<int?>("Parameter1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("parameter1")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("Parameter2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("parameter2")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("VoteCaseId")
                        .HasColumnType("int(11)")
                        .HasColumnName("voteCaseID");

                    b.HasKey("OptionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "VoteCaseId" }, "voteCaseID");

                    b.ToTable("crpVoteOptions");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrtCategory", b =>
                {
                    b.Property<byte>("CategoryId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("categoryID");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("categoryName");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.ToTable("crtCategories");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrtCertificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .HasColumnType("int(11)")
                        .HasColumnName("certificateID");

                    b.Property<byte?>("CategoryId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("categoryID");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int(11)")
                        .HasColumnName("classID");

                    b.Property<int?>("CorpId")
                        .HasColumnType("int(11)")
                        .HasColumnName("corpID");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<sbyte?>("Grade")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("grade");

                    b.Property<int?>("IconId")
                        .HasColumnType("int(11)")
                        .HasColumnName("iconID");

                    b.HasKey("CertificateId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CorpId" }, "corpID");

                    b.HasIndex(new[] { "CategoryId" }, "crtCertificates_IX_category");

                    b.HasIndex(new[] { "ClassId" }, "crtCertificates_IX_class");

                    b.ToTable("crtCertificates");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrtClass", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int(11)")
                        .HasColumnName("classID");

                    b.Property<string>("ClassName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("className");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.HasKey("ClassId")
                        .HasName("PRIMARY");

                    b.ToTable("crtClasses");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrtRecommendation", b =>
                {
                    b.Property<uint>("ShipTypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("shipTypeID");

                    b.Property<uint>("CertificateId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("certificateID");

                    b.Property<uint>("RecommendationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("recommendationID");

                    b.Property<uint>("RecommendationLevel")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("recommendationLevel");

                    b.HasKey("ShipTypeId", "CertificateId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("crtRecommendations");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.CrtRelationship", b =>
                {
                    b.Property<uint>("RelationshipId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("relationshipID");

                    b.Property<uint>("ChildId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("childID");

                    b.Property<uint>("ChildTypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("childTypeID");

                    b.Property<uint>("ParentId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("parentID");

                    b.Property<uint>("ParentLevel")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("parentLevel");

                    b.Property<uint>("ParentTypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("parentTypeID");

                    b.HasKey("RelationshipId")
                        .HasName("PRIMARY");

                    b.ToTable("crtRelationships");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.DgmAttributeCategory", b =>
                {
                    b.Property<byte>("CategoryId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("categoryID");

                    b.Property<string>("CategoryDescription")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("categoryDescription");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("categoryName");

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.ToTable("dgmAttributeCategories");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.DgmAttributeType", b =>
                {
                    b.Property<uint>("AttributeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("attributeID");

                    b.Property<uint?>("AttributeCategory")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("attributeCategory");

                    b.Property<uint?>("AttributeIdx")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("attributeIdx");

                    b.Property<string>("AttributeName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("attributeName");

                    b.Property<uint?>("CategoryId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("categoryID");

                    b.Property<uint?>("ChargeRechargeTimeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("chargeRechargeTimeID");

                    b.Property<double?>("DefaultValue")
                        .HasColumnType("double")
                        .HasColumnName("defaultValue");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("displayName");

                    b.Property<uint?>("GraphicId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("graphicID");

                    b.Property<uint?>("HighIsGood")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("highIsGood");

                    b.Property<uint?>("MaxAttributeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("maxAttributeID");

                    b.Property<uint?>("Published")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("published");

                    b.Property<uint?>("Stackable")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("stackable");

                    b.Property<uint?>("UnitId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("unitID");

                    b.HasKey("AttributeId")
                        .HasName("PRIMARY");

                    b.ToTable("dgmAttributeTypes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.DgmEffect", b =>
                {
                    b.Property<short>("EffectId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("effectID");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<bool?>("DisallowAutoRepeat")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("disallowAutoRepeat");

                    b.Property<short?>("DischargeAttributeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("dischargeAttributeID");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("displayName");

                    b.Property<sbyte?>("Distribution")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("distribution");

                    b.Property<short?>("DurationAttributeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("durationAttributeID");

                    b.Property<short?>("EffectCategory")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("effectCategory");

                    b.Property<string>("EffectName")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("effectName");

                    b.Property<bool?>("ElectronicChance")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("electronicChance");

                    b.Property<short?>("FalloffAttributeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("falloffAttributeID");

                    b.Property<short?>("FittingUsageChanceAttributeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("fittingUsageChanceAttributeID");

                    b.Property<short?>("GraphicId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("graphicID");

                    b.Property<string>("Guid")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("guid");

                    b.Property<bool?>("IsAssistance")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isAssistance");

                    b.Property<bool?>("IsOffensive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isOffensive");

                    b.Property<bool?>("IsWarpSafe")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isWarpSafe");

                    b.Property<short?>("NpcActivationChanceAttributeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("npcActivationChanceAttributeID");

                    b.Property<short?>("NpcUsageChanceAttributeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("npcUsageChanceAttributeID");

                    b.Property<int?>("PostExpression")
                        .HasColumnType("int(11)")
                        .HasColumnName("postExpression");

                    b.Property<int?>("PreExpression")
                        .HasColumnType("int(11)")
                        .HasColumnName("preExpression");

                    b.Property<bool?>("PropulsionChance")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("propulsionChance");

                    b.Property<bool?>("Published")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published");

                    b.Property<short?>("RangeAttributeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("rangeAttributeID");

                    b.Property<bool?>("RangeChance")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("rangeChance");

                    b.Property<string>("SfxName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("sfxName");

                    b.Property<short?>("TrackingSpeedAttributeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("trackingSpeedAttributeID");

                    b.HasKey("EffectId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DischargeAttributeId" }, "dischargeAttributeID");

                    b.HasIndex(new[] { "DurationAttributeId" }, "durationAttributeID");

                    b.HasIndex(new[] { "FalloffAttributeId" }, "falloffAttributeID");

                    b.HasIndex(new[] { "FittingUsageChanceAttributeId" }, "fittingUsageChanceAttributeID");

                    b.HasIndex(new[] { "GraphicId" }, "graphicID")
                        .HasDatabaseName("graphicID7");

                    b.HasIndex(new[] { "NpcActivationChanceAttributeId" }, "npcActivationChanceAttributeID");

                    b.HasIndex(new[] { "NpcUsageChanceAttributeId" }, "npcUsageChanceAttributeID");

                    b.HasIndex(new[] { "RangeAttributeId" }, "rangeAttributeID");

                    b.HasIndex(new[] { "TrackingSpeedAttributeId" }, "trackingSpeedAttributeID");

                    b.ToTable("dgmEffects");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.DgmExpression", b =>
                {
                    b.Property<int>("ExpressionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("expressionID");

                    b.Property<int?>("Arg1")
                        .HasColumnType("int(11)")
                        .HasColumnName("arg1");

                    b.Property<int?>("Arg2")
                        .HasColumnType("int(11)")
                        .HasColumnName("arg2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<short?>("ExpressionAttributeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("expressionAttributeID");

                    b.Property<short?>("ExpressionGroupId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("expressionGroupID");

                    b.Property<string>("ExpressionName")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("expressionName");

                    b.Property<int?>("ExpressionTypeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("expressionTypeID");

                    b.Property<string>("ExpressionValue")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("expressionValue");

                    b.Property<int?>("OperandId")
                        .HasColumnType("int(11)")
                        .HasColumnName("operandID");

                    b.HasKey("ExpressionId")
                        .HasName("PRIMARY");

                    b.ToTable("dgmExpressions");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.DgmTypeAttribute", b =>
                {
                    b.Property<short>("TypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("typeID");

                    b.Property<short>("AttributeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("attributeID");

                    b.Property<double?>("ValueFloat")
                        .HasColumnType("double")
                        .HasColumnName("valueFloat");

                    b.Property<int?>("ValueInt")
                        .HasColumnType("int(11)")
                        .HasColumnName("valueInt");

                    b.HasKey("TypeId", "AttributeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "AttributeId" }, "attributeID");

                    b.ToTable("dgmTypeAttributes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.DgmTypeEffect", b =>
                {
                    b.Property<short>("TypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("typeID");

                    b.Property<short>("EffectId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("effectID");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isDefault");

                    b.HasKey("TypeId", "EffectId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "EffectId" }, "effectID");

                    b.ToTable("dgmTypeEffects");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.DroneState", b =>
                {
                    b.Property<uint>("DroneId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("droneID");

                    b.Property<uint>("ActivityState")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("activityState");

                    b.Property<uint>("ControllerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("controllerID");

                    b.Property<uint>("ControllerOwnerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("controllerOwnerID");

                    b.Property<uint>("OwnerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("ownerID");

                    b.Property<uint>("SolarSystemId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("solarSystemID");

                    b.Property<uint>("TypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("typeID");

                    b.HasKey("DroneId")
                        .HasName("PRIMARY");

                    b.ToTable("droneState");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.EveConstant", b =>
                {
                    b.Property<string>("ConstantId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("constantID")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("ConstantValue")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("constantValue");

                    b.HasKey("ConstantId")
                        .HasName("PRIMARY");

                    b.ToTable("eveConstants");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.EveGraphic", b =>
                {
                    b.Property<short>("GraphicId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("graphicID");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<short?>("ExplosionId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("explosionID");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("icon");

                    b.Property<bool?>("Obsolete")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("obsolete");

                    b.Property<bool?>("Published")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published");

                    b.Property<string>("Url3D")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("url3D");

                    b.Property<string>("UrlSound")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("urlSound");

                    b.Property<string>("UrlWeb")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("urlWeb");

                    b.HasKey("GraphicId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ExplosionId" }, "explosionID");

                    b.ToTable("eveGraphics");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.EveLiveUpdate", b =>
                {
                    b.Property<int>("UpdateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("updateID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UpdateId"));

                    b.Property<int?>("BuildNumberMax")
                        .HasColumnType("int(11)")
                        .HasColumnName("buildNumberMax");

                    b.Property<int?>("BuildNumberMin")
                        .HasColumnType("int(11)")
                        .HasColumnName("buildNumberMin");

                    b.Property<byte[]>("Code")
                        .HasColumnType("blob")
                        .HasColumnName("code");

                    b.Property<string>("CodeType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("codeType");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<int?>("MachoVersionMax")
                        .HasColumnType("int(11)")
                        .HasColumnName("machoVersionMax");

                    b.Property<int?>("MachoVersionMin")
                        .HasColumnType("int(11)")
                        .HasColumnName("machoVersionMin");

                    b.Property<string>("MethodName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("methodName");

                    b.Property<string>("ObjectId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("objectID");

                    b.Property<string>("UpdateName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("updateName");

                    b.HasKey("UpdateId")
                        .HasName("PRIMARY");

                    b.ToTable("eveLiveUpdates");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.EveMail", b =>
                {
                    b.Property<uint>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("messageID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("MessageId"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasColumnName("body")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("ChannelId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("channelID");

                    b.Property<ulong>("Created")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("created");

                    b.Property<uint>("MimeTypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("mimeTypeID");

                    b.Property<byte>("Read")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("read");

                    b.Property<uint>("SenderId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("senderID");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("subject")
                        .HasDefaultValueSql("''");

                    b.HasKey("MessageId")
                        .HasName("PRIMARY");

                    b.ToTable("eveMail");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.EveMailMimeType", b =>
                {
                    b.Property<uint>("MimeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("mimeTypeID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("MimeTypeId"));

                    b.Property<byte>("Binary")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("binary");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mimeType");

                    b.HasKey("MimeTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("eveMailMimeType");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.EveMessage", b =>
                {
                    b.Property<string>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("messageID")
                        .HasDefaultValueSql("''");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("messageText");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("messageType")
                        .HasDefaultValueSql("''");

                    b.Property<string>("UrlAudio")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("urlAudio");

                    b.Property<string>("UrlIcon")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("urlIcon");

                    b.HasKey("MessageId")
                        .HasName("PRIMARY");

                    b.ToTable("eveMessages");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.EveName", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int(11)")
                        .HasColumnName("itemID");

                    b.Property<byte?>("CategoryId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("categoryID");

                    b.Property<short?>("GroupId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("groupID");

                    b.Property<string>("ItemName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("itemName");

                    b.Property<short?>("TypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("typeID");

                    b.HasKey("ItemId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryId" }, "categoryID");

                    b.HasIndex(new[] { "GroupId" }, "groupID");

                    b.HasIndex(new[] { "TypeId" }, "typeID")
                        .HasDatabaseName("typeID3");

                    b.ToTable("eveNames");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.EveRole", b =>
                {
                    b.Property<string>("RoleName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("roleName")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("description");

                    b.Property<uint>("RoleId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("roleID");

                    b.HasKey("RoleName")
                        .HasName("PRIMARY");

                    b.ToTable("eveRoles");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.EveUnit", b =>
                {
                    b.Property<byte>("UnitId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("unitID");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("displayName");

                    b.Property<string>("UnitName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("unitName");

                    b.HasKey("UnitId")
                        .HasName("PRIMARY");

                    b.ToTable("eveUnits");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.FactionRace", b =>
                {
                    b.Property<uint>("FactionId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("factionID");

                    b.Property<uint>("RaceId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("raceID");

                    b.HasKey("FactionId", "RaceId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("factionRaces");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.Intro", b =>
                {
                    b.Property<string>("LangId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("langID");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<string>("TextLabel")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("textLabel");

                    b.Property<uint>("Textgroup")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("textgroup");

                    b.HasIndex(new[] { "TextLabel" }, "textLabel");

                    b.ToTable("intro");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.InvBlueprint", b =>
                {
                    b.Property<uint>("ItemId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("itemID");

                    b.Property<byte>("Copy")
                        .HasColumnType("tinyint(1) unsigned")
                        .HasColumnName("copy");

                    b.Property<int>("LicensedProductionRunsRemaining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10)")
                        .HasColumnName("licensedProductionRunsRemaining")
                        .HasDefaultValueSql("-1");

                    b.Property<uint>("MaterialLevel")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("materialLevel");

                    b.Property<uint>("ProductivityLevel")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("productivityLevel");

                    b.HasKey("ItemId")
                        .HasName("PRIMARY");

                    b.ToTable("invBlueprints");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.InvBlueprintType", b =>
                {
                    b.Property<short>("BlueprintTypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("blueprintTypeID");

                    b.Property<double?>("ChanceOfReverseEngineering")
                        .HasColumnType("double")
                        .HasColumnName("chanceOfReverseEngineering");

                    b.Property<short?>("MaterialModifier")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("materialModifier");

                    b.Property<int?>("MaxProductionLimit")
                        .HasColumnType("int(11)")
                        .HasColumnName("maxProductionLimit");

                    b.Property<short?>("ParentBlueprintTypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("parentBlueprintTypeID");

                    b.Property<short?>("ProductTypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("productTypeID");

                    b.Property<int?>("ProductionTime")
                        .HasColumnType("int(11)")
                        .HasColumnName("productionTime");

                    b.Property<int?>("ProductivityModifier")
                        .HasColumnType("int(11)")
                        .HasColumnName("productivityModifier");

                    b.Property<int?>("ResearchCopyTime")
                        .HasColumnType("int(11)")
                        .HasColumnName("researchCopyTime");

                    b.Property<int?>("ResearchMaterialTime")
                        .HasColumnType("int(11)")
                        .HasColumnName("researchMaterialTime");

                    b.Property<int?>("ResearchProductivityTime")
                        .HasColumnType("int(11)")
                        .HasColumnName("researchProductivityTime");

                    b.Property<int?>("ResearchTechTime")
                        .HasColumnType("int(11)")
                        .HasColumnName("researchTechTime");

                    b.Property<short?>("TechLevel")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("techLevel");

                    b.Property<short?>("WasteFactor")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("wasteFactor");

                    b.HasKey("BlueprintTypeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ParentBlueprintTypeId" }, "parentBlueprintTypeID");

                    b.HasIndex(new[] { "ProductTypeId" }, "productTypeID");

                    b.ToTable("invBlueprintTypes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.InvCategory", b =>
                {
                    b.Property<byte>("CategoryId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("categoryID");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("categoryName");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("varchar(3000)")
                        .HasColumnName("description");

                    b.Property<short?>("GraphicId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("graphicID");

                    b.Property<bool?>("Published")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published");

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GraphicId" }, "graphicID")
                        .HasDatabaseName("graphicID8");

                    b.ToTable("invCategories");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.InvContrabandType", b =>
                {
                    b.Property<int>("FactionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("factionID");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("typeID");

                    b.Property<double?>("AttackMinSec")
                        .HasColumnType("double")
                        .HasColumnName("attackMinSec");

                    b.Property<double?>("ConfiscateMinSec")
                        .HasColumnType("double")
                        .HasColumnName("confiscateMinSec");

                    b.Property<double?>("FineByValue")
                        .HasColumnType("double")
                        .HasColumnName("fineByValue");

                    b.Property<double?>("StandingLoss")
                        .HasColumnType("double")
                        .HasColumnName("standingLoss");

                    b.HasKey("FactionId", "TypeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "TypeId" }, "invContrabandTypes_IX_type");

                    b.ToTable("invContrabandTypes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.InvControlTowerResource", b =>
                {
                    b.Property<short>("ControlTowerTypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("controlTowerTypeID");

                    b.Property<short>("ResourceTypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("resourceTypeID");

                    b.Property<int?>("FactionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("factionID");

                    b.Property<double?>("MinSecurityLevel")
                        .HasColumnType("double")
                        .HasColumnName("minSecurityLevel");

                    b.Property<sbyte?>("Purpose")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("purpose");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int(11)")
                        .HasColumnName("quantity");

                    b.HasKey("ControlTowerTypeId", "ResourceTypeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "FactionId" }, "factionID");

                    b.HasIndex(new[] { "Purpose" }, "purpose");

                    b.HasIndex(new[] { "ResourceTypeId" }, "resourceTypeID");

                    b.ToTable("invControlTowerResources");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.InvControlTowerResourcePurpose", b =>
                {
                    b.Property<sbyte>("Purpose")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("purpose");

                    b.Property<string>("PurposeText")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("purposeText");

                    b.HasKey("Purpose")
                        .HasName("PRIMARY");

                    b.ToTable("invControlTowerResourcePurposes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.InvFlag", b =>
                {
                    b.Property<byte>("FlagId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("flagID");

                    b.Property<string>("FlagName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("flagName");

                    b.Property<string>("FlagText")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("flagText");

                    b.Property<string>("FlagType")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("flagType");

                    b.Property<short?>("OrderId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("orderID");

                    b.HasKey("FlagId")
                        .HasName("PRIMARY");

                    b.ToTable("invFlags");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.InvGroup", b =>
                {
                    b.Property<short>("GroupId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("groupID");

                    b.Property<bool?>("AllowManufacture")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allowManufacture");

                    b.Property<bool?>("AllowRecycler")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("allowRecycler");

                    b.Property<bool?>("Anchorable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("anchorable");

                    b.Property<bool?>("Anchored")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("anchored");

                    b.Property<byte?>("CategoryId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("categoryID");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("varchar(3000)")
                        .HasColumnName("description");

                    b.Property<bool?>("FittableNonSingleton")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("fittableNonSingleton");

                    b.Property<short?>("GraphicId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("graphicID");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("groupName");

                    b.Property<bool?>("Published")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published");

                    b.Property<bool?>("UseBasePrice")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("useBasePrice");

                    b.HasKey("GroupId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GraphicId" }, "graphicID")
                        .HasDatabaseName("graphicID9");

                    b.HasIndex(new[] { "CategoryId" }, "invGroups_IX_category");

                    b.ToTable("invGroups");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.InvItem", b =>
                {
                    b.Property<uint>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("itemID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("ItemId"));

                    b.Property<uint>("Contraband")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("contraband");

                    b.Property<string>("CustomInfo")
                        .HasColumnType("text")
                        .HasColumnName("customInfo");

                    b.Property<uint>("Flag")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("flag");

                    b.Property<uint>("LocationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("locationID");

                    b.Property<long?>("NodeId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("nodeID");

                    b.Property<uint>("OwnerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("ownerID");

                    b.Property<uint>("Quantity")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("quantity");

                    b.Property<uint>("Singleton")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("singleton");

                    b.Property<uint>("TypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("typeID");

                    b.HasKey("ItemId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "LocationId" }, "locationID");

                    b.HasIndex(new[] { "OwnerId" }, "ownerID")
                        .HasDatabaseName("ownerID1");

                    b.HasIndex(new[] { "TypeId" }, "typeID")
                        .HasDatabaseName("typeID4");

                    b.ToTable("invItems");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.InvItemsAttribute", b =>
                {
                    b.Property<uint>("ItemId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("itemID");

                    b.Property<uint>("AttributeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("attributeID");

                    b.Property<double?>("ValueFloat")
                        .HasColumnType("double unsigned")
                        .HasColumnName("valueFloat");

                    b.Property<ulong?>("ValueInt")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("valueInt");

                    b.HasKey("ItemId", "AttributeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "AttributeId" }, "attributeID")
                        .HasDatabaseName("attributeID1");

                    b.ToTable("invItemsAttributes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.InvItemsLocked", b =>
                {
                    b.Property<uint>("ItemId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("itemID");

                    b.Property<uint>("CorporationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("corporationID");

                    b.Property<uint>("StationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("stationID");

                    b.Property<int>("VoteCaseId")
                        .HasColumnType("int(11)")
                        .HasColumnName("voteCaseID");

                    b.HasKey("ItemId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "StationId" }, "stationID");

                    b.ToTable("invItemsLocked");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.InvMarketGroup", b =>
                {
                    b.Property<short>("MarketGroupId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("marketGroupID");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("varchar(3000)")
                        .HasColumnName("description");

                    b.Property<short?>("GraphicId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("graphicID");

                    b.Property<bool?>("HasTypes")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("hasTypes");

                    b.Property<string>("MarketGroupName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("marketGroupName");

                    b.Property<short?>("ParentGroupId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("parentGroupID");

                    b.HasKey("MarketGroupId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GraphicId" }, "graphicID")
                        .HasDatabaseName("graphicID10");

                    b.HasIndex(new[] { "ParentGroupId" }, "parentGroupID");

                    b.ToTable("invMarketGroups");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.InvMetaGroup", b =>
                {
                    b.Property<short>("MetaGroupId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("metaGroupID");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<short?>("GraphicId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("graphicID");

                    b.Property<string>("MetaGroupName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("metaGroupName");

                    b.HasKey("MetaGroupId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GraphicId" }, "graphicID")
                        .HasDatabaseName("graphicID11");

                    b.ToTable("invMetaGroups");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.InvMetaType", b =>
                {
                    b.Property<short>("TypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("typeID");

                    b.Property<short?>("MetaGroupId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("metaGroupID");

                    b.Property<short?>("ParentTypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("parentTypeID");

                    b.HasKey("TypeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MetaGroupId" }, "metaGroupID");

                    b.HasIndex(new[] { "ParentTypeId" }, "parentTypeID");

                    b.ToTable("invMetaTypes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.InvPosition", b =>
                {
                    b.Property<uint>("ItemId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("itemID");

                    b.Property<double>("X")
                        .HasColumnType("double")
                        .HasColumnName("x");

                    b.Property<double>("Y")
                        .HasColumnType("double")
                        .HasColumnName("y");

                    b.Property<double>("Z")
                        .HasColumnType("double")
                        .HasColumnName("z");

                    b.HasKey("ItemId")
                        .HasName("PRIMARY");

                    b.ToTable("invPositions");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.InvShipType", b =>
                {
                    b.Property<uint>("ShipTypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("shipTypeID");

                    b.Property<uint?>("MiningTypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("miningTypeID");

                    b.Property<uint?>("SkillTypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("skillTypeID");

                    b.Property<uint?>("WeaponTypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("weaponTypeID");

                    b.HasKey("ShipTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("invShipTypes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.InvType", b =>
                {
                    b.Property<short>("TypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("typeID");

                    b.Property<double?>("BasePrice")
                        .HasColumnType("double")
                        .HasColumnName("basePrice");

                    b.Property<double?>("Capacity")
                        .HasColumnType("double")
                        .HasColumnName("capacity");

                    b.Property<double?>("ChanceOfDuplicating")
                        .HasColumnType("double")
                        .HasColumnName("chanceOfDuplicating");

                    b.Property<uint>("DataId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("dataID");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("varchar(3000)")
                        .HasColumnName("description");

                    b.Property<short?>("GraphicId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("graphicID");

                    b.Property<short?>("GroupId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("groupID");

                    b.Property<short?>("MarketGroupId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("marketGroupID");

                    b.Property<double?>("Mass")
                        .HasColumnType("double")
                        .HasColumnName("mass");

                    b.Property<int?>("PortionSize")
                        .HasColumnType("int(11)")
                        .HasColumnName("portionSize");

                    b.Property<bool?>("Published")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published");

                    b.Property<byte?>("RaceId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("raceID");

                    b.Property<double?>("Radius")
                        .HasColumnType("double")
                        .HasColumnName("radius");

                    b.Property<string>("TypeName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("typeName");

                    b.Property<double?>("Volume")
                        .HasColumnType("double")
                        .HasColumnName("volume");

                    b.HasKey("TypeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GraphicId" }, "graphicID")
                        .HasDatabaseName("graphicID12");

                    b.HasIndex(new[] { "GroupId" }, "invTypes_IX_Group");

                    b.HasIndex(new[] { "MarketGroupId" }, "marketGroupID");

                    b.HasIndex(new[] { "RaceId" }, "raceID")
                        .HasDatabaseName("raceID3");

                    b.ToTable("invTypes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.InvTypeReaction", b =>
                {
                    b.Property<short>("ReactionTypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("reactionTypeID");

                    b.Property<bool>("Input")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("input");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("typeID");

                    b.Property<short?>("Quantity")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("quantity");

                    b.HasKey("ReactionTypeId", "Input", "TypeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.HasIndex(new[] { "TypeId" }, "typeID")
                        .HasDatabaseName("typeID5");

                    b.ToTable("invTypeReactions");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.Language", b =>
                {
                    b.Property<string>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("languageID")
                        .HasDefaultValueSql("''");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("languageName")
                        .HasDefaultValueSql("''");

                    b.Property<string>("TranslatedLanguageName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(22)
                        .HasColumnType("varchar(22)")
                        .HasColumnName("translatedLanguageName")
                        .HasDefaultValueSql("''");

                    b.HasKey("LanguageId")
                        .HasName("PRIMARY");

                    b.ToTable("languages");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.LscChannelPermission", b =>
                {
                    b.Property<int>("ChannelId")
                        .HasColumnType("int(10)")
                        .HasColumnName("channelID");

                    b.Property<uint>("Accessor")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("accessor");

                    b.Property<string>("Admin")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)")
                        .HasColumnName("admin");

                    b.Property<uint>("Mode")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("mode");

                    b.Property<uint?>("OriginalMode")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("originalMode");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<ulong?>("UntilWhen")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("untilWhen");

                    b.HasKey("ChannelId", "Accessor")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ChannelId" }, "FK_CHANNELMODS_CHANNELS");

                    b.ToTable("lscChannelPermissions");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.LscGeneralChannel", b =>
                {
                    b.Property<uint>("ChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("channelID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("ChannelId"));

                    b.Property<string>("ComparisonKey")
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("comparisonKey");

                    b.Property<sbyte>("Cspa")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("cspa");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)")
                        .HasColumnName("displayName");

                    b.Property<uint>("EstimatedMemberCount")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("estimatedMemberCount");

                    b.Property<sbyte>("MailingList")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("mailingList");

                    b.Property<sbyte>("Memberless")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("memberless");

                    b.Property<string>("Motd")
                        .HasColumnType("text")
                        .HasColumnName("motd");

                    b.Property<uint>("OwnerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("ownerID");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<uint?>("RelatedEntityId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("relatedEntityID");

                    b.Property<sbyte>("Temporary")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("temporary");

                    b.HasKey("ChannelId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OwnerId" }, "FK_CHANNELS_OWNER");

                    b.HasIndex(new[] { "RelatedEntityId" }, "FK_CHANNELS_RELEATEDENTITY");

                    b.ToTable("lscGeneralChannels");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.LscPrivateChannel", b =>
                {
                    b.Property<uint>("ChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("channelID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("ChannelId"));

                    b.Property<string>("ComparisonKey")
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("comparisonKey");

                    b.Property<sbyte>("Cspa")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("cspa");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)")
                        .HasColumnName("displayName");

                    b.Property<uint>("EstimatedMemberCount")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("estimatedMemberCount");

                    b.Property<sbyte>("MailingList")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("mailingList");

                    b.Property<sbyte>("Memberless")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("memberless");

                    b.Property<string>("Motd")
                        .HasColumnType("text")
                        .HasColumnName("motd");

                    b.Property<uint>("OwnerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("ownerID");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<sbyte>("Temporary")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("temporary");

                    b.HasKey("ChannelId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OwnerId" }, "FK_CHANNELS_OWNER")
                        .HasDatabaseName("FK_CHANNELS_OWNER1");

                    b.ToTable("lscPrivateChannels");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MapCelestialDescription", b =>
                {
                    b.Property<uint>("CelestialId")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("celestialID");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("CelestialId")
                        .HasName("PRIMARY");

                    b.ToTable("mapCelestialDescriptions");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MapCelestialStatistic", b =>
                {
                    b.Property<int>("CelestialId")
                        .HasColumnType("int(11)")
                        .HasColumnName("celestialID");

                    b.Property<double?>("Age")
                        .HasColumnType("double")
                        .HasColumnName("age");

                    b.Property<double?>("Density")
                        .HasColumnType("double")
                        .HasColumnName("density");

                    b.Property<double?>("Eccentricity")
                        .HasColumnType("double")
                        .HasColumnName("eccentricity");

                    b.Property<double?>("EscapeVelocity")
                        .HasColumnType("double")
                        .HasColumnName("escapeVelocity");

                    b.Property<bool?>("Fragmented")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("fragmented");

                    b.Property<double?>("Life")
                        .HasColumnType("double")
                        .HasColumnName("life");

                    b.Property<bool?>("Locked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("locked");

                    b.Property<double?>("Luminosity")
                        .HasColumnType("double")
                        .HasColumnName("luminosity");

                    b.Property<double?>("Mass")
                        .HasColumnType("double")
                        .HasColumnName("mass");

                    b.Property<double?>("MassDust")
                        .HasColumnType("double")
                        .HasColumnName("massDust");

                    b.Property<double?>("MassGas")
                        .HasColumnType("double")
                        .HasColumnName("massGas");

                    b.Property<double?>("OrbitPeriod")
                        .HasColumnType("double")
                        .HasColumnName("orbitPeriod");

                    b.Property<double?>("OrbitRadius")
                        .HasColumnType("double")
                        .HasColumnName("orbitRadius");

                    b.Property<double?>("Pressure")
                        .HasColumnType("double")
                        .HasColumnName("pressure");

                    b.Property<double?>("Radius")
                        .HasColumnType("double")
                        .HasColumnName("radius");

                    b.Property<double?>("RotationRate")
                        .HasColumnType("double")
                        .HasColumnName("rotationRate");

                    b.Property<string>("SpectralClass")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("spectralClass");

                    b.Property<double?>("SurfaceGravity")
                        .HasColumnType("double")
                        .HasColumnName("surfaceGravity");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double")
                        .HasColumnName("temperature");

                    b.HasKey("CelestialId")
                        .HasName("PRIMARY");

                    b.ToTable("mapCelestialStatistics");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MapConstellation", b =>
                {
                    b.Property<int>("ConstellationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("constellationID");

                    b.Property<string>("ConstellationName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("constellationName");

                    b.Property<int?>("FactionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("factionID");

                    b.Property<double?>("Radius")
                        .HasColumnType("double")
                        .HasColumnName("radius");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("regionID");

                    b.Property<double?>("X")
                        .HasColumnType("double")
                        .HasColumnName("x");

                    b.Property<double?>("XMax")
                        .HasColumnType("double")
                        .HasColumnName("xMax");

                    b.Property<double?>("XMin")
                        .HasColumnType("double")
                        .HasColumnName("xMin");

                    b.Property<double?>("Y")
                        .HasColumnType("double")
                        .HasColumnName("y");

                    b.Property<double?>("YMax")
                        .HasColumnType("double")
                        .HasColumnName("yMax");

                    b.Property<double?>("YMin")
                        .HasColumnType("double")
                        .HasColumnName("yMin");

                    b.Property<double?>("Z")
                        .HasColumnType("double")
                        .HasColumnName("z");

                    b.Property<double?>("ZMax")
                        .HasColumnType("double")
                        .HasColumnName("zMax");

                    b.Property<double?>("ZMin")
                        .HasColumnType("double")
                        .HasColumnName("zMin");

                    b.HasKey("ConstellationId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ConstellationId", "RegionId" }, "constellationID")
                        .IsUnique();

                    b.HasIndex(new[] { "FactionId" }, "factionID")
                        .HasDatabaseName("factionID1");

                    b.HasIndex(new[] { "RegionId" }, "mapConstellations_IX_region");

                    b.ToTable("mapConstellations");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MapConstellationJump", b =>
                {
                    b.Property<int>("FromConstellationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("fromConstellationID");

                    b.Property<int>("ToConstellationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("toConstellationID");

                    b.Property<int?>("FromRegionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("fromRegionID");

                    b.Property<int?>("ToRegionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("toRegionID");

                    b.HasKey("FromConstellationId", "ToConstellationId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "FromConstellationId", "FromRegionId" }, "fromConstellationID");

                    b.HasIndex(new[] { "FromRegionId" }, "mapConstellationJumps_IX_fromRegion");

                    b.HasIndex(new[] { "ToConstellationId", "ToRegionId" }, "toConstellationID");

                    b.ToTable("mapConstellationJumps");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MapDenormalize", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int(11)")
                        .HasColumnName("itemID");

                    b.Property<sbyte?>("CelestialIndex")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("celestialIndex");

                    b.Property<int?>("ConstellationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("constellationID");

                    b.Property<short?>("GroupId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("groupID");

                    b.Property<string>("ItemName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("itemName");

                    b.Property<int?>("OrbitId")
                        .HasColumnType("int(11)")
                        .HasColumnName("orbitID");

                    b.Property<sbyte?>("OrbitIndex")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("orbitIndex");

                    b.Property<double?>("Radius")
                        .HasColumnType("double")
                        .HasColumnName("radius");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("regionID");

                    b.Property<double?>("Security")
                        .HasColumnType("double")
                        .HasColumnName("security");

                    b.Property<int?>("SolarSystemId")
                        .HasColumnType("int(11)")
                        .HasColumnName("solarSystemID");

                    b.Property<short?>("TypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("typeID");

                    b.Property<double?>("X")
                        .HasColumnType("double")
                        .HasColumnName("x");

                    b.Property<double?>("Y")
                        .HasColumnType("double")
                        .HasColumnName("y");

                    b.Property<double?>("Z")
                        .HasColumnType("double")
                        .HasColumnName("z");

                    b.HasKey("ItemId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ConstellationId" }, "mapDenormalize_IX_constellation");

                    b.HasIndex(new[] { "GroupId", "ConstellationId" }, "mapDenormalize_IX_groupConstellation");

                    b.HasIndex(new[] { "GroupId", "RegionId" }, "mapDenormalize_IX_groupRegion");

                    b.HasIndex(new[] { "GroupId", "SolarSystemId" }, "mapDenormalize_IX_groupSystem");

                    b.HasIndex(new[] { "OrbitId" }, "mapDenormalize_IX_orbit");

                    b.HasIndex(new[] { "RegionId" }, "mapDenormalize_IX_region");

                    b.HasIndex(new[] { "SolarSystemId" }, "mapDenormalize_IX_system");

                    b.HasIndex(new[] { "TypeId" }, "typeID")
                        .HasDatabaseName("typeID6");

                    b.ToTable("mapDenormalize");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MapJump", b =>
                {
                    b.Property<int>("StargateId")
                        .HasColumnType("int(11)")
                        .HasColumnName("stargateID");

                    b.Property<int?>("CelestialId")
                        .HasColumnType("int(11)")
                        .HasColumnName("celestialID");

                    b.HasKey("StargateId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CelestialId" }, "celestialID");

                    b.ToTable("mapJumps");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MapLandmark", b =>
                {
                    b.Property<short>("LandmarkId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("landmarkID");

                    b.Property<string>("Description")
                        .HasMaxLength(7000)
                        .HasColumnType("varchar(7000)")
                        .HasColumnName("description");

                    b.Property<short?>("GraphicId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("graphicID");

                    b.Property<sbyte?>("Importance")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("importance");

                    b.Property<string>("LandmarkName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("landmarkName");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("locationID");

                    b.Property<double?>("Radius")
                        .HasColumnType("double")
                        .HasColumnName("radius");

                    b.Property<string>("Url2d")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url2d");

                    b.Property<double?>("X")
                        .HasColumnType("double")
                        .HasColumnName("x");

                    b.Property<double?>("Y")
                        .HasColumnType("double")
                        .HasColumnName("y");

                    b.Property<double?>("Z")
                        .HasColumnType("double")
                        .HasColumnName("z");

                    b.HasKey("LandmarkId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GraphicId" }, "graphicID")
                        .HasDatabaseName("graphicID13");

                    b.HasIndex(new[] { "LocationId" }, "locationID")
                        .HasDatabaseName("locationID1");

                    b.ToTable("mapLandmarks");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MapLocationWormholeClass", b =>
                {
                    b.Property<uint>("LocationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("locationID");

                    b.Property<uint>("WormholeClassId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("wormholeClassID");

                    b.HasKey("LocationId")
                        .HasName("PRIMARY");

                    b.ToTable("mapLocationWormholeClasses");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MapPrecalculatedSolarSystemJump", b =>
                {
                    b.Property<int>("FromSolarSystemId")
                        .HasColumnType("int(11)")
                        .HasColumnName("fromSolarSystemID");

                    b.Property<int>("ToSolarSystemId")
                        .HasColumnType("int(11)")
                        .HasColumnName("toSolarSystemID");

                    b.Property<int?>("Jumps")
                        .HasColumnType("int(11)")
                        .HasColumnName("jumps");

                    b.HasKey("FromSolarSystemId", "ToSolarSystemId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("mapPrecalculatedSolarSystemJumps");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MapRegion", b =>
                {
                    b.Property<int>("RegionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("regionID");

                    b.Property<int?>("FactionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("factionID");

                    b.Property<double?>("Radius")
                        .HasColumnType("double")
                        .HasColumnName("radius");

                    b.Property<string>("RegionName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("regionName");

                    b.Property<double?>("X")
                        .HasColumnType("double")
                        .HasColumnName("x");

                    b.Property<double?>("XMax")
                        .HasColumnType("double")
                        .HasColumnName("xMax");

                    b.Property<double?>("XMin")
                        .HasColumnType("double")
                        .HasColumnName("xMin");

                    b.Property<double?>("Y")
                        .HasColumnType("double")
                        .HasColumnName("y");

                    b.Property<double?>("YMax")
                        .HasColumnType("double")
                        .HasColumnName("yMax");

                    b.Property<double?>("YMin")
                        .HasColumnType("double")
                        .HasColumnName("yMin");

                    b.Property<double?>("Z")
                        .HasColumnType("double")
                        .HasColumnName("z");

                    b.Property<double?>("ZMax")
                        .HasColumnType("double")
                        .HasColumnName("zMax");

                    b.Property<double?>("ZMin")
                        .HasColumnType("double")
                        .HasColumnName("zMin");

                    b.HasKey("RegionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FactionId" }, "factionID")
                        .HasDatabaseName("factionID2");

                    b.ToTable("mapRegions");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MapRegionJump", b =>
                {
                    b.Property<int>("FromRegionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("fromRegionID");

                    b.Property<int>("ToRegionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("toRegionID");

                    b.HasKey("FromRegionId", "ToRegionId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ToRegionId" }, "toRegionID");

                    b.ToTable("mapRegionJumps");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MapSolarSystem", b =>
                {
                    b.Property<int>("SolarSystemId")
                        .HasColumnType("int(11)")
                        .HasColumnName("solarSystemID");

                    b.Property<bool?>("Border")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("border");

                    b.Property<bool?>("Constellation")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("constellation");

                    b.Property<int?>("ConstellationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("constellationID");

                    b.Property<bool?>("Corridor")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("corridor");

                    b.Property<int?>("FactionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("factionID");

                    b.Property<bool?>("Fringe")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("fringe");

                    b.Property<bool?>("Hub")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("hub");

                    b.Property<bool?>("International")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("international");

                    b.Property<double?>("Luminosity")
                        .HasColumnType("double")
                        .HasColumnName("luminosity");

                    b.Property<double?>("Radius")
                        .HasColumnType("double")
                        .HasColumnName("radius");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("regionID");

                    b.Property<bool?>("Regional")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("regional");

                    b.Property<double?>("Security")
                        .HasColumnType("double")
                        .HasColumnName("security");

                    b.Property<string>("SecurityClass")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("securityClass");

                    b.Property<string>("SolarSystemName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("solarSystemName");

                    b.Property<short?>("SunTypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("sunTypeID");

                    b.Property<double?>("X")
                        .HasColumnType("double")
                        .HasColumnName("x");

                    b.Property<double?>("XMax")
                        .HasColumnType("double")
                        .HasColumnName("xMax");

                    b.Property<double?>("XMin")
                        .HasColumnType("double")
                        .HasColumnName("xMin");

                    b.Property<double?>("Y")
                        .HasColumnType("double")
                        .HasColumnName("y");

                    b.Property<double?>("YMax")
                        .HasColumnType("double")
                        .HasColumnName("yMax");

                    b.Property<double?>("YMin")
                        .HasColumnType("double")
                        .HasColumnName("yMin");

                    b.Property<double?>("Z")
                        .HasColumnType("double")
                        .HasColumnName("z");

                    b.Property<double?>("ZMax")
                        .HasColumnType("double")
                        .HasColumnName("zMax");

                    b.Property<double?>("ZMin")
                        .HasColumnType("double")
                        .HasColumnName("zMin");

                    b.HasKey("SolarSystemId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FactionId" }, "factionID")
                        .HasDatabaseName("factionID3");

                    b.HasIndex(new[] { "ConstellationId" }, "mapSolarSystems_IX_constellation");

                    b.HasIndex(new[] { "RegionId" }, "mapSolarSystems_IX_region");

                    b.HasIndex(new[] { "Security" }, "mapSolarSystems_IX_security");

                    b.HasIndex(new[] { "SolarSystemId", "ConstellationId", "RegionId" }, "solarSystemID")
                        .IsUnique()
                        .HasDatabaseName("solarSystemID2");

                    b.HasIndex(new[] { "SunTypeId" }, "sunTypeID");

                    b.ToTable("mapSolarSystems");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MapSolarSystemJump", b =>
                {
                    b.Property<int>("FromSolarSystemId")
                        .HasColumnType("int(11)")
                        .HasColumnName("fromSolarSystemID");

                    b.Property<int>("ToSolarSystemId")
                        .HasColumnType("int(11)")
                        .HasColumnName("toSolarSystemID");

                    b.Property<int?>("FromConstellationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("fromConstellationID");

                    b.Property<int?>("FromRegionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("fromRegionID");

                    b.Property<int?>("ToConstellationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("toConstellationID");

                    b.Property<int?>("ToRegionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("toRegionID");

                    b.HasKey("FromSolarSystemId", "ToSolarSystemId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "FromSolarSystemId", "FromConstellationId", "FromRegionId" }, "fromSolarSystemID");

                    b.HasIndex(new[] { "FromConstellationId" }, "mapSolarSystemJumps_IX_fromConstellation");

                    b.HasIndex(new[] { "FromRegionId" }, "mapSolarSystemJumps_IX_fromRegion");

                    b.HasIndex(new[] { "ToSolarSystemId", "ToConstellationId", "ToRegionId" }, "toSolarSystemID");

                    b.ToTable("mapSolarSystemJumps");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MapUniverse", b =>
                {
                    b.Property<int>("UniverseId")
                        .HasColumnType("int(11)")
                        .HasColumnName("universeID");

                    b.Property<double?>("Radius")
                        .HasColumnType("double")
                        .HasColumnName("radius");

                    b.Property<string>("UniverseName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("universeName");

                    b.Property<double?>("X")
                        .HasColumnType("double")
                        .HasColumnName("x");

                    b.Property<double?>("XMax")
                        .HasColumnType("double")
                        .HasColumnName("xMax");

                    b.Property<double?>("XMin")
                        .HasColumnType("double")
                        .HasColumnName("xMin");

                    b.Property<double?>("Y")
                        .HasColumnType("double")
                        .HasColumnName("y");

                    b.Property<double?>("YMax")
                        .HasColumnType("double")
                        .HasColumnName("yMax");

                    b.Property<double?>("YMin")
                        .HasColumnType("double")
                        .HasColumnName("yMin");

                    b.Property<double?>("Z")
                        .HasColumnType("double")
                        .HasColumnName("z");

                    b.Property<double?>("ZMax")
                        .HasColumnType("double")
                        .HasColumnName("zMax");

                    b.Property<double?>("ZMin")
                        .HasColumnType("double")
                        .HasColumnName("zMin");

                    b.HasKey("UniverseId")
                        .HasName("PRIMARY");

                    b.ToTable("mapUniverse");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MarketRefType", b =>
                {
                    b.Property<uint>("RefTypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("refTypeID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("description");

                    b.Property<string>("RefTypeText")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("refTypeText")
                        .HasDefaultValueSql("''");

                    b.HasKey("RefTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("market_refTypes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MktBill", b =>
                {
                    b.Property<uint>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("billID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("BillId"));

                    b.Property<double>("Amount")
                        .HasColumnType("double(22,0)")
                        .HasColumnName("amount");

                    b.Property<uint?>("BillTypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("billTypeID");

                    b.Property<uint?>("CreditorId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("creditorID");

                    b.Property<uint?>("DebtorId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("debtorID");

                    b.Property<long>("DueDateTime")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("dueDateTime");

                    b.Property<int>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("externalID")
                        .HasDefaultValueSql("-1");

                    b.Property<int>("ExternalId2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("externalID2")
                        .HasDefaultValueSql("-1");

                    b.Property<double>("Interest")
                        .HasColumnType("double(22,0)")
                        .HasColumnName("interest");

                    b.Property<sbyte>("Paid")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("paid");

                    b.HasKey("BillId")
                        .HasName("PRIMARY");

                    b.ToTable("mktBills");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MktHistoryOld", b =>
                {
                    b.Property<double>("AvgPrice")
                        .HasColumnType("double")
                        .HasColumnName("avgPrice");

                    b.Property<double>("HighPrice")
                        .HasColumnType("double")
                        .HasColumnName("highPrice");

                    b.Property<ulong>("HistoryDate")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("historyDate");

                    b.Property<double>("LowPrice")
                        .HasColumnType("double")
                        .HasColumnName("lowPrice");

                    b.Property<uint>("Orders")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("orders");

                    b.Property<uint>("RegionId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("regionID");

                    b.Property<uint>("TypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("typeID");

                    b.Property<uint>("Volume")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("volume");

                    b.ToTable("mktHistoryOld");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MktJournal", b =>
                {
                    b.Property<uint>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("transactionID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("TransactionId"));

                    b.Property<uint>("AccountKey")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("accountKey");

                    b.Property<double>("Amount")
                        .HasColumnType("double")
                        .HasColumnName("amount");

                    b.Property<double>("Balance")
                        .HasColumnType("double")
                        .HasColumnName("balance");

                    b.Property<uint?>("CharId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("charID")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Description")
                        .HasMaxLength(43)
                        .HasColumnType("varchar(43)")
                        .HasColumnName("description");

                    b.Property<uint>("EntryTypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("entryTypeID");

                    b.Property<uint?>("OwnerId1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("ownerID1")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint?>("OwnerId2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("ownerID2")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int(10)")
                        .HasColumnName("referenceID");

                    b.Property<long?>("TransactionDate")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("transactionDate");

                    b.HasKey("TransactionId")
                        .HasName("PRIMARY");

                    b.ToTable("mktJournal");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MktKeyMap", b =>
                {
                    b.Property<uint>("AccountKey")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("accountKey");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("accountName")
                        .HasDefaultValueSql("''");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("accountType")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("''");

                    b.HasKey("AccountKey")
                        .HasName("PRIMARY");

                    b.ToTable("mktKeyMap");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MktOrder", b =>
                {
                    b.Property<uint>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("orderID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("OrderId"));

                    b.Property<uint>("AccountId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("accountID");

                    b.Property<byte>("Bid")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("bid");

                    b.Property<uint>("CharId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("charID");

                    b.Property<uint>("CorpId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("corpID");

                    b.Property<uint>("Duration")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("duration");

                    b.Property<byte>("Escrow")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("escrow");

                    b.Property<byte>("IsCorp")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("isCorp");

                    b.Property<ulong>("Issued")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("issued");

                    b.Property<uint>("MinVolume")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("minVolume");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<short>("Range")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("range");

                    b.Property<uint>("StationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("stationID");

                    b.Property<uint>("TypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("typeID");

                    b.Property<uint>("VolEntered")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("volEntered");

                    b.Property<uint>("VolRemaining")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("volRemaining");

                    b.HasKey("OrderId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "StationId" }, "stationID")
                        .HasDatabaseName("stationID1");

                    b.HasIndex(new[] { "TypeId" }, "typeID")
                        .HasDatabaseName("typeID7");

                    b.ToTable("mktOrders");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MktRefType", b =>
                {
                    b.Property<uint>("RefTypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("refTypeID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("description");

                    b.Property<string>("RefTypeText")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("refTypeText")
                        .HasDefaultValueSql("''");

                    b.HasKey("RefTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("mktRefTypes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MktTransaction", b =>
                {
                    b.Property<uint>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("transactionID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("TransactionId"));

                    b.Property<uint>("AccountKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("accountKey")
                        .HasDefaultValueSql("'1000'");

                    b.Property<uint>("CharacterId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("characterID");

                    b.Property<uint?>("ClientId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("clientID");

                    b.Property<int>("EntityId")
                        .HasColumnType("int(11)")
                        .HasColumnName("entityID");

                    b.Property<double>("Price")
                        .HasColumnType("double(22,0)")
                        .HasColumnName("price");

                    b.Property<uint>("Quantity")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("quantity");

                    b.Property<uint>("StationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("stationID");

                    b.Property<ulong>("TransactionDateTime")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("transactionDateTime");

                    b.Property<uint>("TransactionType")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("transactionType");

                    b.Property<uint>("TypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("typeID");

                    b.HasKey("TransactionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "StationId" }, "stationID")
                        .HasDatabaseName("stationID2");

                    b.ToTable("mktTransactions");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.MktWallet", b =>
                {
                    b.Property<int>("Key")
                        .HasColumnType("int(11)")
                        .HasColumnName("key");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ownerID");

                    b.Property<double>("Balance")
                        .HasColumnType("double")
                        .HasColumnName("balance");

                    b.HasKey("Key", "OwnerId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("mktWallets");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.NpcStanding", b =>
                {
                    b.Property<uint>("FromId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("fromID");

                    b.Property<uint>("ToId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("toID");

                    b.Property<double>("Standing")
                        .HasColumnType("double")
                        .HasColumnName("standing");

                    b.HasKey("FromId", "ToId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("npcStandings");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.RamActivity", b =>
                {
                    b.Property<byte>("ActivityId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("activityID");

                    b.Property<string>("ActivityName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("activityName");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("IconNo")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("iconNo");

                    b.Property<bool?>("Published")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published");

                    b.HasKey("ActivityId")
                        .HasName("PRIMARY");

                    b.ToTable("ramActivities");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.RamAssemblyLine", b =>
                {
                    b.Property<int>("AssemblyLineId")
                        .HasColumnType("int(11)")
                        .HasColumnName("assemblyLineID");

                    b.Property<byte?>("ActivityId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("activityID");

                    b.Property<byte?>("AssemblyLineTypeId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("assemblyLineTypeID");

                    b.Property<int?>("ContainerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("containerID");

                    b.Property<double?>("CostInstall")
                        .HasColumnType("double")
                        .HasColumnName("costInstall");

                    b.Property<double?>("CostPerHour")
                        .HasColumnType("double")
                        .HasColumnName("costPerHour");

                    b.Property<double?>("DiscountPerGoodStandingPoint")
                        .HasColumnType("double")
                        .HasColumnName("discountPerGoodStandingPoint");

                    b.Property<double?>("MaximumCharSecurity")
                        .HasColumnType("double")
                        .HasColumnName("maximumCharSecurity");

                    b.Property<double?>("MaximumCorpSecurity")
                        .HasColumnType("double")
                        .HasColumnName("maximumCorpSecurity");

                    b.Property<double?>("MinimumCharSecurity")
                        .HasColumnType("double")
                        .HasColumnName("minimumCharSecurity");

                    b.Property<double?>("MinimumCorpSecurity")
                        .HasColumnType("double")
                        .HasColumnName("minimumCorpSecurity");

                    b.Property<double?>("MinimumStanding")
                        .HasColumnType("double")
                        .HasColumnName("minimumStanding");

                    b.Property<long?>("NextFreeTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("nextFreeTime")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ownerID");

                    b.Property<sbyte?>("RestrictionMask")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("restrictionMask");

                    b.Property<double?>("SurchargePerBadStandingPoint")
                        .HasColumnType("double")
                        .HasColumnName("surchargePerBadStandingPoint");

                    b.Property<byte?>("UigroupingId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("UIGroupingID");

                    b.HasKey("AssemblyLineId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ActivityId" }, "activityID");

                    b.HasIndex(new[] { "AssemblyLineTypeId" }, "assemblyLineTypeID");

                    b.HasIndex(new[] { "ContainerId" }, "ramAssemblyLines_IX_container");

                    b.HasIndex(new[] { "OwnerId" }, "ramAssemblyLines_IX_owner");

                    b.ToTable("ramAssemblyLines");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.RamAssemblyLineStation", b =>
                {
                    b.Property<int>("StationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("stationID");

                    b.Property<byte>("AssemblyLineTypeId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("assemblyLineTypeID");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("ownerID");

                    b.Property<sbyte?>("Quantity")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("quantity");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("regionID");

                    b.Property<int?>("SolarSystemId")
                        .HasColumnType("int(11)")
                        .HasColumnName("solarSystemID");

                    b.Property<short?>("StationTypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("stationTypeID");

                    b.HasKey("StationId", "AssemblyLineTypeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "AssemblyLineTypeId" }, "assemblyLineTypeID")
                        .HasDatabaseName("assemblyLineTypeID1");

                    b.HasIndex(new[] { "OwnerId" }, "ramAssemblyLineStations_IX_owner");

                    b.HasIndex(new[] { "RegionId" }, "ramAssemblyLineStations_IX_region");

                    b.HasIndex(new[] { "SolarSystemId" }, "solarSystemID")
                        .HasDatabaseName("solarSystemID3");

                    b.HasIndex(new[] { "StationTypeId" }, "stationTypeID");

                    b.ToTable("ramAssemblyLineStations");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.RamAssemblyLineStationCostLog", b =>
                {
                    b.Property<int>("AssemblyLineTypeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("assemblyLineTypeID");

                    b.Property<float>("CostPerHour")
                        .HasColumnType("float")
                        .HasColumnName("costPerHour");

                    b.Property<string>("LogDateTime")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("char(20)")
                        .HasColumnName("logDateTime")
                        .HasDefaultValueSql("''")
                        .IsFixedLength();

                    b.Property<int>("StationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("stationID");

                    b.Property<double>("Usage")
                        .HasColumnType("double")
                        .HasColumnName("_usage");

                    b.HasKey("AssemblyLineTypeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "StationId" }, "stationID")
                        .HasDatabaseName("stationID3");

                    b.ToTable("ramAssemblyLineStationCostLogs");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.RamAssemblyLineType", b =>
                {
                    b.Property<byte>("AssemblyLineTypeId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("assemblyLineTypeID");

                    b.Property<byte?>("ActivityId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("activityID");

                    b.Property<string>("AssemblyLineTypeName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("assemblyLineTypeName");

                    b.Property<double?>("BaseMaterialMultiplier")
                        .HasColumnType("double")
                        .HasColumnName("baseMaterialMultiplier");

                    b.Property<double?>("BaseTimeMultiplier")
                        .HasColumnType("double")
                        .HasColumnName("baseTimeMultiplier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<double?>("MinCostPerHour")
                        .HasColumnType("double")
                        .HasColumnName("minCostPerHour");

                    b.Property<double?>("Volume")
                        .HasColumnType("double")
                        .HasColumnName("volume");

                    b.HasKey("AssemblyLineTypeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ActivityId" }, "activityID")
                        .HasDatabaseName("activityID1");

                    b.ToTable("ramAssemblyLineTypes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.RamAssemblyLineTypeDetailPerCategory", b =>
                {
                    b.Property<byte>("AssemblyLineTypeId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("assemblyLineTypeID");

                    b.Property<byte>("CategoryId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("categoryID");

                    b.Property<double?>("MaterialMultiplier")
                        .HasColumnType("double")
                        .HasColumnName("materialMultiplier");

                    b.Property<double?>("TimeMultiplier")
                        .HasColumnType("double")
                        .HasColumnName("timeMultiplier");

                    b.HasKey("AssemblyLineTypeId", "CategoryId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "CategoryId" }, "categoryID")
                        .HasDatabaseName("categoryID1");

                    b.ToTable("ramAssemblyLineTypeDetailPerCategory");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.RamAssemblyLineTypeDetailPerGroup", b =>
                {
                    b.Property<byte>("AssemblyLineTypeId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("assemblyLineTypeID");

                    b.Property<short>("GroupId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("groupID");

                    b.Property<double?>("MaterialMultiplier")
                        .HasColumnType("double")
                        .HasColumnName("materialMultiplier");

                    b.Property<double?>("TimeMultiplier")
                        .HasColumnType("double")
                        .HasColumnName("timeMultiplier");

                    b.HasKey("AssemblyLineTypeId", "GroupId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "GroupId" }, "groupID")
                        .HasDatabaseName("groupID1");

                    b.ToTable("ramAssemblyLineTypeDetailPerGroup");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.RamCompletedStatus", b =>
                {
                    b.Property<uint>("CompletedStatusId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("completedStatusID");

                    b.Property<string>("CompletedStatusName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("completedStatusName")
                        .HasDefaultValueSql("''");

                    b.Property<string>("CompletedStatusText")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("completedStatusText")
                        .HasDefaultValueSql("''");

                    b.HasKey("CompletedStatusId")
                        .HasName("PRIMARY");

                    b.ToTable("ramCompletedStatuses");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.RamInstallationTypeDefaultContent", b =>
                {
                    b.Property<int>("InstallationTypeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("installationTypeID");

                    b.Property<int>("AssemblyLineTypeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("assemblyLineTypeID");

                    b.Property<float>("CostInstall")
                        .HasColumnType("float")
                        .HasColumnName("costInstall");

                    b.Property<float>("CostPerHour")
                        .HasColumnType("float")
                        .HasColumnName("costPerHour");

                    b.Property<float>("DiscountPerGoodStandingPoint")
                        .HasColumnType("float")
                        .HasColumnName("discountPerGoodStandingPoint");

                    b.Property<float>("MaximumCharSecurity")
                        .HasColumnType("float")
                        .HasColumnName("maximumCharSecurity");

                    b.Property<float>("MaximumCorpSecurity")
                        .HasColumnType("float")
                        .HasColumnName("maximumCorpSecurity");

                    b.Property<float>("MinimumCharSecurity")
                        .HasColumnType("float")
                        .HasColumnName("minimumCharSecurity");

                    b.Property<float>("MinimumCorpSecurity")
                        .HasColumnType("float")
                        .HasColumnName("minimumCorpSecurity");

                    b.Property<float>("MinimumStanding")
                        .HasColumnType("float")
                        .HasColumnName("minimumStanding");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(11)")
                        .HasColumnName("quantity");

                    b.Property<int>("RestrictionMask")
                        .HasColumnType("int(11)")
                        .HasColumnName("restrictionMask");

                    b.Property<float>("SurchargePerBadStandingPoint")
                        .HasColumnType("float")
                        .HasColumnName("surchargePerBadStandingPoint");

                    b.Property<int>("UigroupingId")
                        .HasColumnType("int(11)")
                        .HasColumnName("UIGroupingID");

                    b.HasKey("InstallationTypeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AssemblyLineTypeId" }, "assemblyLineTypeID")
                        .HasDatabaseName("assemblyLineTypeID2");

                    b.ToTable("ramInstallationTypeDefaultContents");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.RamJob", b =>
                {
                    b.Property<uint>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("jobID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("JobId"));

                    b.Property<uint>("AssemblyLineId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("assemblyLineID");

                    b.Property<ulong>("BeginProductionTime")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("beginProductionTime");

                    b.Property<uint>("CompletedStatusId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("completedStatusID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("'blah'");

                    b.Property<ulong>("EndProductionTime")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("endProductionTime");

                    b.Property<ulong>("InstallTime")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("installTime");

                    b.Property<uint>("InstalledInSolarSystemId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("installedInSolarSystemID");

                    b.Property<uint>("InstalledItemId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("installedItemID");

                    b.Property<uint>("InstallerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("installerID");

                    b.Property<int?>("LicensedProductionRuns")
                        .HasColumnType("int(10)")
                        .HasColumnName("licensedProductionRuns");

                    b.Property<uint>("OutputFlag")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("outputFlag");

                    b.Property<uint>("OwnerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("ownerID");

                    b.Property<ulong?>("PauseProductionTime")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("pauseProductionTime");

                    b.Property<uint>("Runs")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("runs");

                    b.HasKey("JobId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AssemblyLineId" }, "RAMJOBS_ASSEMBLYLINES");

                    b.ToTable("ramJobs");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.RentalInfo", b =>
                {
                    b.Property<uint>("StationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("stationID");

                    b.Property<uint>("SlotNumber")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("slotNumber");

                    b.Property<uint>("BalanceDueDate")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("balanceDueDate");

                    b.Property<uint>("BillId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("billID");

                    b.Property<byte>("Discontinue")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("discontinue");

                    b.Property<double>("PeriodCost")
                        .HasColumnType("double")
                        .HasColumnName("periodCost");

                    b.Property<byte>("PubliclyAvailable")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("publiclyAvailable");

                    b.Property<uint>("RentPeriodInDays")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("rentPeriodInDays");

                    b.Property<uint>("RenterId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("renterID");

                    b.Property<uint>("TypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("typeID");

                    b.HasKey("StationId", "SlotNumber")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("rentalInfo");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.RoidDistribution", b =>
                {
                    b.Property<double>("Percent")
                        .HasColumnType("double")
                        .HasColumnName("percent");

                    b.Property<uint>("RoidId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("roidID");

                    b.Property<string>("SystemSec")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("systemSec");

                    b.HasIndex(new[] { "SystemSec" }, "systemSec");

                    b.ToTable("roidDistribution");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.Spawn", b =>
                {
                    b.Property<uint>("SpawnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("spawnID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("SpawnId"));

                    b.Property<uint>("RespawnTimeMax")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("respawnTimeMax");

                    b.Property<uint>("RespawnTimeMin")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("respawnTimeMin");

                    b.Property<uint>("SolarSystemId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("solarSystemID");

                    b.Property<uint>("SpawnBoundType")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("spawnBoundType");

                    b.Property<uint>("SpawnGroupId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("spawnGroupID");

                    b.Property<uint>("SpawnTimer")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("spawnTimer");

                    b.HasKey("SpawnId")
                        .HasName("PRIMARY");

                    b.ToTable("spawns");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.SpawnBound", b =>
                {
                    b.Property<uint>("SpawnId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("spawnID");

                    b.Property<byte>("PointIndex")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("pointIndex");

                    b.Property<double>("X")
                        .HasColumnType("double")
                        .HasColumnName("x");

                    b.Property<double>("Y")
                        .HasColumnType("double")
                        .HasColumnName("y");

                    b.Property<double>("Z")
                        .HasColumnType("double")
                        .HasColumnName("z");

                    b.HasKey("SpawnId", "PointIndex")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("spawnBounds");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.SpawnGroup", b =>
                {
                    b.Property<uint>("SpawnGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("spawnGroupID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("SpawnGroupId"));

                    b.Property<uint>("Formation")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("formation");

                    b.Property<string>("SpawnGroupName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(85)
                        .HasColumnType("varchar(85)")
                        .HasColumnName("spawnGroupName")
                        .HasDefaultValueSql("''");

                    b.HasKey("SpawnGroupId")
                        .HasName("PRIMARY");

                    b.ToTable("spawnGroups");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.SpawnGroupEntry", b =>
                {
                    b.Property<uint>("SpawnGroupId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("spawnGroupID");

                    b.Property<uint>("NpcTypeId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("npcTypeID");

                    b.Property<uint>("CorporationId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("corporationID");

                    b.Property<uint>("OwnerId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("ownerID");

                    b.Property<float>("Probability")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("probability")
                        .HasDefaultValueSql("'1'");

                    b.Property<byte>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("quantity")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("SpawnGroupId", "NpcTypeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("spawnGroupEntries");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.StaOperation", b =>
                {
                    b.Property<byte>("OperationId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("operationID");

                    b.Property<byte?>("ActivityId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("activityID");

                    b.Property<short?>("AmarrStationTypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("amarrStationTypeID");

                    b.Property<sbyte?>("Border")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("border");

                    b.Property<short?>("CaldariStationTypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("caldariStationTypeID");

                    b.Property<sbyte?>("Corridor")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("corridor");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<sbyte?>("Fringe")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("fringe");

                    b.Property<short?>("GallenteStationTypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("gallenteStationTypeID");

                    b.Property<sbyte?>("Hub")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("hub");

                    b.Property<short?>("JoveStationTypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("joveStationTypeID");

                    b.Property<short?>("MinmatarStationTypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("minmatarStationTypeID");

                    b.Property<string>("OperationName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("operationName");

                    b.Property<sbyte?>("Ratio")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("ratio");

                    b.HasKey("OperationId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ActivityId" }, "activityID")
                        .HasDatabaseName("activityID2");

                    b.HasIndex(new[] { "AmarrStationTypeId" }, "amarrStationTypeID");

                    b.HasIndex(new[] { "CaldariStationTypeId" }, "caldariStationTypeID");

                    b.HasIndex(new[] { "GallenteStationTypeId" }, "gallenteStationTypeID");

                    b.HasIndex(new[] { "JoveStationTypeId" }, "joveStationTypeID");

                    b.HasIndex(new[] { "MinmatarStationTypeId" }, "minmatarStationTypeID");

                    b.ToTable("staOperations");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.StaOperationService", b =>
                {
                    b.Property<byte>("OperationId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("operationID");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("serviceID");

                    b.HasKey("OperationId", "ServiceId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ServiceId" }, "serviceID");

                    b.ToTable("staOperationServices");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.StaService", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int(11)")
                        .HasColumnName("serviceID");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("serviceName");

                    b.HasKey("ServiceId")
                        .HasName("PRIMARY");

                    b.ToTable("staServices");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.StaStation", b =>
                {
                    b.Property<int>("StationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("stationID");

                    b.Property<int?>("ConstellationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("constellationID");

                    b.Property<int?>("CorporationId")
                        .HasColumnType("int(11)")
                        .HasColumnName("corporationID");

                    b.Property<double?>("DockingCostPerVolume")
                        .HasColumnType("double")
                        .HasColumnName("dockingCostPerVolume");

                    b.Property<double?>("MaxShipVolumeDockable")
                        .HasColumnType("double")
                        .HasColumnName("maxShipVolumeDockable");

                    b.Property<int?>("OfficeRentalCost")
                        .HasColumnType("int(11)")
                        .HasColumnName("officeRentalCost");

                    b.Property<byte?>("OperationId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("operationID");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int(11)")
                        .HasColumnName("regionID");

                    b.Property<double?>("ReprocessingEfficiency")
                        .HasColumnType("double")
                        .HasColumnName("reprocessingEfficiency");

                    b.Property<sbyte?>("ReprocessingHangarFlag")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("reprocessingHangarFlag");

                    b.Property<double?>("ReprocessingStationsTake")
                        .HasColumnType("double")
                        .HasColumnName("reprocessingStationsTake");

                    b.Property<short?>("Security")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("security");

                    b.Property<int?>("SolarSystemId")
                        .HasColumnType("int(11)")
                        .HasColumnName("solarSystemID");

                    b.Property<string>("StationName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("stationName");

                    b.Property<short?>("StationTypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("stationTypeID");

                    b.Property<double?>("X")
                        .HasColumnType("double")
                        .HasColumnName("x");

                    b.Property<double?>("Y")
                        .HasColumnType("double")
                        .HasColumnName("y");

                    b.Property<double?>("Z")
                        .HasColumnType("double")
                        .HasColumnName("z");

                    b.HasKey("StationId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "SolarSystemId", "ConstellationId", "RegionId" }, "solarSystemID")
                        .HasDatabaseName("solarSystemID4");

                    b.HasIndex(new[] { "ConstellationId" }, "staStations_IX_constellation");

                    b.HasIndex(new[] { "CorporationId" }, "staStations_IX_corporation");

                    b.HasIndex(new[] { "OperationId" }, "staStations_IX_operation");

                    b.HasIndex(new[] { "RegionId" }, "staStations_IX_region");

                    b.HasIndex(new[] { "SolarSystemId" }, "staStations_IX_system");

                    b.HasIndex(new[] { "StationTypeId" }, "staStations_IX_type");

                    b.ToTable("staStations");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.StaStationType", b =>
                {
                    b.Property<short>("StationTypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("stationTypeID");

                    b.Property<bool?>("Conquerable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("conquerable");

                    b.Property<double?>("DockEntryX")
                        .HasColumnType("double")
                        .HasColumnName("dockEntryX");

                    b.Property<double?>("DockEntryY")
                        .HasColumnType("double")
                        .HasColumnName("dockEntryY");

                    b.Property<double?>("DockEntryZ")
                        .HasColumnType("double")
                        .HasColumnName("dockEntryZ");

                    b.Property<double?>("DockOrientationX")
                        .HasColumnType("double")
                        .HasColumnName("dockOrientationX");

                    b.Property<double?>("DockOrientationY")
                        .HasColumnType("double")
                        .HasColumnName("dockOrientationY");

                    b.Property<double?>("DockOrientationZ")
                        .HasColumnType("double")
                        .HasColumnName("dockOrientationZ");

                    b.Property<short?>("DockingBayGraphicId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("dockingBayGraphicID");

                    b.Property<short?>("HangarGraphicId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("hangarGraphicID");

                    b.Property<sbyte?>("OfficeSlots")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("officeSlots");

                    b.Property<byte?>("OperationId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("operationID");

                    b.Property<double?>("ReprocessingEfficiency")
                        .HasColumnType("double")
                        .HasColumnName("reprocessingEfficiency");

                    b.HasKey("StationTypeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DockingBayGraphicId" }, "dockingBayGraphicID");

                    b.HasIndex(new[] { "HangarGraphicId" }, "hangarGraphicID");

                    b.HasIndex(new[] { "OperationId" }, "operationID");

                    b.ToTable("staStationTypes");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.TrnTranslation", b =>
                {
                    b.Property<short>("TcId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("tcID");

                    b.Property<int>("KeyId")
                        .HasColumnType("int(11)")
                        .HasColumnName("keyID");

                    b.Property<string>("LanguageId")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("languageID")
                        .IsFixedLength();

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(16000)
                        .HasColumnType("varchar(16000)")
                        .HasColumnName("text");

                    b.HasKey("TcId", "KeyId", "LanguageId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("trnTranslations");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.TrnTranslationColumn", b =>
                {
                    b.Property<short>("TcId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("tcID");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("columnName");

                    b.Property<string>("MasterId")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("masterID");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("tableName");

                    b.Property<short?>("TcGroupId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("tcGroupID");

                    b.HasKey("TcId")
                        .HasName("PRIMARY");

                    b.ToTable("trnTranslationColumns");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.Tutorial", b =>
                {
                    b.Property<uint>("TutorialId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("tutorialID");

                    b.Property<uint>("CategoryId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("categoryID");

                    b.Property<uint?>("NextTutorialId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("nextTutorialID");

                    b.Property<string>("TutorialName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tutorialName");

                    b.HasKey("TutorialId")
                        .HasName("PRIMARY");

                    b.ToTable("tutorials");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.TutorialCategory", b =>
                {
                    b.Property<uint>("CategoryId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("categoryID");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("categoryName");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("''");

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.ToTable("tutorial_categories");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.TutorialCriterion", b =>
                {
                    b.Property<uint>("CriteriaId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("criteriaID");

                    b.Property<string>("AudioPath")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("audioPath");

                    b.Property<string>("CriteriaName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("criteriaName")
                        .HasDefaultValueSql("''");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("messageText");

                    b.HasKey("CriteriaId")
                        .HasName("PRIMARY");

                    b.ToTable("tutorial_criteria");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.TutorialPage", b =>
                {
                    b.Property<uint>("PageId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("pageID");

                    b.Property<string>("AudioPath")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("audioPath")
                        .HasDefaultValueSql("''");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("imagePath");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("pageName")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("PageNumber")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("pageNumber");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasColumnName("text");

                    b.Property<uint>("TutorialId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("tutorialID");

                    b.HasKey("PageId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TutorialId", "PageNumber" }, "tutorialID")
                        .IsUnique();

                    b.ToTable("tutorial_pages");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.TutorialPageCriterion", b =>
                {
                    b.Property<uint>("PageId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("pageID");

                    b.Property<uint>("CriteriaId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("criteriaID");

                    b.HasKey("PageId", "CriteriaId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.ToTable("tutorial_page_criteria");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.TutorialsCriteria", b =>
                {
                    b.Property<uint>("TutorialId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("tutorialID");

                    b.Property<uint>("CriteriaId")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("criteriaID");

                    b.HasKey("TutorialId", "CriteriaId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "CriteriaId" }, "criteriaID");

                    b.ToTable("tutorials_criterias");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.TypeActivityMaterial", b =>
                {
                    b.Property<short>("TypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("typeID");

                    b.Property<byte>("ActivityId")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("activityID");

                    b.Property<short>("RequiredTypeId")
                        .HasColumnType("smallint(6)")
                        .HasColumnName("requiredTypeID");

                    b.Property<double?>("DamagePerJob")
                        .HasColumnType("double")
                        .HasColumnName("damagePerJob");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int(11)")
                        .HasColumnName("quantity");

                    b.Property<bool?>("Recycle")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("recycle");

                    b.HasKey("TypeId", "ActivityId", "RequiredTypeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.HasIndex(new[] { "RequiredTypeId" }, "requiredTypeID");

                    b.HasIndex(new[] { "ActivityId" }, "typeActivityMaterials_IX_activity");

                    b.ToTable("typeActivityMaterials");

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb3");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb3_unicode_ci");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrFriend", b =>
                {
                    b.HasOne("EVESharp.Database.Entity.ChrInformation", "Character")
                        .WithMany("ChrFriendCharacters")
                        .HasForeignKey("CharacterId")
                        .IsRequired()
                        .HasConstraintName("fk_characterID");

                    b.HasOne("EVESharp.Database.Entity.ChrInformation", "Friend")
                        .WithMany("ChrFriendFriends")
                        .HasForeignKey("FriendId")
                        .IsRequired()
                        .HasConstraintName("fk_friendID");

                    b.Navigation("Character");

                    b.Navigation("Friend");
                });

            modelBuilder.Entity("EVESharp.Database.Entity.ChrInformation", b =>
                {
                    b.Navigation("ChrFriendCharacters");

                    b.Navigation("ChrFriendFriends");
                });
#pragma warning restore 612, 618
        }
    }
}
